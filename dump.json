[
{
  "model": "contenttypes.contenttype",
  "fields": {
    "app_label": "admin",
    "model": "logentry"
  }
},
{
  "model": "contenttypes.contenttype",
  "fields": {
    "app_label": "auth",
    "model": "permission"
  }
},
{
  "model": "contenttypes.contenttype",
  "fields": {
    "app_label": "auth",
    "model": "group"
  }
},
{
  "model": "contenttypes.contenttype",
  "fields": {
    "app_label": "contenttypes",
    "model": "contenttype"
  }
},
{
  "model": "contenttypes.contenttype",
  "fields": {
    "app_label": "sessions",
    "model": "session"
  }
},
{
  "model": "contenttypes.contenttype",
  "fields": {
    "app_label": "authtoken",
    "model": "token"
  }
},
{
  "model": "contenttypes.contenttype",
  "fields": {
    "app_label": "authtoken",
    "model": "tokenproxy"
  }
},
{
  "model": "contenttypes.contenttype",
  "fields": {
    "app_label": "quizzes",
    "model": "quiz"
  }
},
{
  "model": "contenttypes.contenttype",
  "fields": {
    "app_label": "users",
    "model": "usercustom"
  }
},
{
  "model": "contenttypes.contenttype",
  "fields": {
    "app_label": "categories",
    "model": "category"
  }
},
{
  "model": "contenttypes.contenttype",
  "fields": {
    "app_label": "questions",
    "model": "matchingpair"
  }
},
{
  "model": "contenttypes.contenttype",
  "fields": {
    "app_label": "questions",
    "model": "mcq"
  }
},
{
  "model": "contenttypes.contenttype",
  "fields": {
    "app_label": "questions",
    "model": "orderingitem"
  }
},
{
  "model": "contenttypes.contenttype",
  "fields": {
    "app_label": "questions",
    "model": "question"
  }
},
{
  "model": "sessions.session",
  "pk": "6fw1hktguqfm10e3ywfhhqeobwbsf5bj",
  "fields": {
    "session_data": ".eJxVi0EOwiAQRe_C2jSUEYZxadJzkAGmgaiYWLoy3l1JXOjy__feUwXeewn7Jo9Qszoppw6_X-R0kTbAmNs0iLReE_d6b9Ny43o9f52_sPBWPpUFWpmN8T6jIMyajGeXNAM4NIxJMhyF1pjIWqPB6yjomJPMSAikXm8O9jTf:1tXK27:WCgVFsTa_ytiH5vbF-SBoX_OUsihzYR0kTZQFqin3T4",
    "expire_date": "2025-01-27T12:59:07.697Z"
  }
},
{
  "model": "questions.mcq",
  "pk": 1,
  "fields": {
    "question": 1,
    "text": "By using decorators on each method",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 2,
  "fields": {
    "question": 1,
    "text": "By inspecting the function signatures in '__new__' and raising an error if mismatched",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 3,
  "fields": {
    "question": 1,
    "text": "By modifying the '__call__' method",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 4,
  "fields": {
    "question": 1,
    "text": "By overriding '__init__'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 5,
  "fields": {
    "question": 2,
    "text": "They improve the function's performance",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 6,
  "fields": {
    "question": 2,
    "text": "They allow retaining state between function calls",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 7,
  "fields": {
    "question": 2,
    "text": "They make the function asynchronous",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 8,
  "fields": {
    "question": 2,
    "text": "They are faster than normal functions",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 9,
  "fields": {
    "question": 3,
    "text": "get_current_thread()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 10,
  "fields": {
    "question": 3,
    "text": "current()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 11,
  "fields": {
    "question": 3,
    "text": "current_thread()",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 12,
  "fields": {
    "question": 3,
    "text": "get_thread()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 13,
  "fields": {
    "question": 4,
    "text": "Only files",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 14,
  "fields": {
    "question": 4,
    "text": "Any object with a 'close()' method",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 15,
  "fields": {
    "question": 4,
    "text": "Only network sockets",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 16,
  "fields": {
    "question": 4,
    "text": "Only database connections",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 17,
  "fields": {
    "question": 5,
    "text": "It stops the program when an exception occurs",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 18,
  "fields": {
    "question": 5,
    "text": "It retries the code block until it succeeds",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 19,
  "fields": {
    "question": 5,
    "text": "It suppresses the specified exceptions without raising them",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 20,
  "fields": {
    "question": 5,
    "text": "It automatically logs the exceptions",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 21,
  "fields": {
    "question": 6,
    "text": "heapq",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 22,
  "fields": {
    "question": 6,
    "text": "queue",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 23,
  "fields": {
    "question": 6,
    "text": "stack",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 24,
  "fields": {
    "question": 6,
    "text": "collections",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 25,
  "fields": {
    "question": 7,
    "text": "list.pop(index)",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 26,
  "fields": {
    "question": 7,
    "text": "list.remove(item)",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 27,
  "fields": {
    "question": 7,
    "text": "list.delete(index)",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 28,
  "fields": {
    "question": 7,
    "text": "list.erase(item)",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 29,
  "fields": {
    "question": 8,
    "text": "math",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 30,
  "fields": {
    "question": 8,
    "text": "Numarray",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 31,
  "fields": {
    "question": 8,
    "text": "Numpy",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 32,
  "fields": {
    "question": 8,
    "text": "Algorithm",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 33,
  "fields": {
    "question": 9,
    "text": "Scripting Language",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 34,
  "fields": {
    "question": 9,
    "text": "Markup Language",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 35,
  "fields": {
    "question": 9,
    "text": "Programming Language",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 36,
  "fields": {
    "question": 9,
    "text": "Network Protocol",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 37,
  "fields": {
    "question": 10,
    "text": "Garbage collection only",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 38,
  "fields": {
    "question": 10,
    "text": "Reference counting",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 39,
  "fields": {
    "question": 10,
    "text": "Disk storage tracking",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 40,
  "fields": {
    "question": 10,
    "text": "Manual memory allocation",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 41,
  "fields": {
    "question": 11,
    "text": "asort()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 42,
  "fields": {
    "question": 11,
    "text": "dsort()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 43,
  "fields": {
    "question": 11,
    "text": "rsort()",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 44,
  "fields": {
    "question": 11,
    "text": "sort()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 45,
  "fields": {
    "question": 12,
    "text": "It schedules new threads to run",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 46,
  "fields": {
    "question": 12,
    "text": "It returns an iterator that yields futures as they complete, regardless of their order",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 47,
  "fields": {
    "question": 12,
    "text": "It terminates completed threads",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 48,
  "fields": {
    "question": 12,
    "text": "It forces all threads to execute concurrently",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 49,
  "fields": {
    "question": 13,
    "text": "Laravel is an open-source widely used PHP framework.",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 50,
  "fields": {
    "question": 13,
    "text": "Laravel is an open-source widely used JavaScript framework.",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 51,
  "fields": {
    "question": 13,
    "text": "Laravel is an open-source widely used Python framework.",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 52,
  "fields": {
    "question": 13,
    "text": "Laravel is an open-source widely used Ruby framework.",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 59,
  "fields": {
    "question": 15,
    "text": "By overriding the '__new__' method to return the same instance",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 60,
  "fields": {
    "question": 15,
    "text": "By modifying the '__init__' method to prevent new instances",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 61,
  "fields": {
    "question": 15,
    "text": "By using a decorator",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 62,
  "fields": {
    "question": 15,
    "text": "By setting a global variable",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 63,
  "fields": {
    "question": 16,
    "text": "Navigate to /admin in the browser",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 64,
  "fields": {
    "question": 16,
    "text": "Navigate to /dashboard",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 65,
  "fields": {
    "question": 16,
    "text": "Navigate to /manage",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 66,
  "fields": {
    "question": 16,
    "text": "Navigate to /settings",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 67,
  "fields": {
    "question": 17,
    "text": "Use the order_by('?') method on the queryset",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 68,
  "fields": {
    "question": 17,
    "text": "Use the get() method",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 69,
  "fields": {
    "question": 17,
    "text": "Use the filter() method",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 70,
  "fields": {
    "question": 17,
    "text": "Use raw SQL queries",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 71,
  "fields": {
    "question": 18,
    "text": "Override the save_model() and delete_model() methods to send notifications using Django signals",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 72,
  "fields": {
    "question": 18,
    "text": "Set notifications=True in ModelAdmin",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 73,
  "fields": {
    "question": 18,
    "text": "Use the @notify_action decorator",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 74,
  "fields": {
    "question": 18,
    "text": "Override the get_queryset() method",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 75,
  "fields": {
    "question": 19,
    "text": "HOST_DOMAINS",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 76,
  "fields": {
    "question": 19,
    "text": "ALLOWED_HOSTS",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 77,
  "fields": {
    "question": 19,
    "text": "VALID_DOMAINS",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 78,
  "fields": {
    "question": 19,
    "text": "AUTHORIZED_HOSTS",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 79,
  "fields": {
    "question": 20,
    "text": "Override the get_permissions() method in the viewset",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 80,
  "fields": {
    "question": 20,
    "text": "Use the permission_classes attribute",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 81,
  "fields": {
    "question": 20,
    "text": "Set permissions in the serializer",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 82,
  "fields": {
    "question": 20,
    "text": "Use the @permission_action decorator",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 83,
  "fields": {
    "question": 21,
    "text": "Override the get_fields() and get_readonly_fields() methods in ModelAdmin based on user role",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 84,
  "fields": {
    "question": 21,
    "text": "Set role_based_access=True in ModelAdmin",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 85,
  "fields": {
    "question": 21,
    "text": "Use the @role_access decorator",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 86,
  "fields": {
    "question": 21,
    "text": "Override the get_queryset() method",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 87,
  "fields": {
    "question": 22,
    "text": "Inherit from models.Model",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 88,
  "fields": {
    "question": 22,
    "text": "Inherit from models.Manager",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 89,
  "fields": {
    "question": 22,
    "text": "Inherit from models.QuerySet",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 90,
  "fields": {
    "question": 22,
    "text": "Use custom_manager decorator",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 91,
  "fields": {
    "question": 23,
    "text": "Use the ForeignKey field with the 'db_constraint' argument set to False",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 92,
  "fields": {
    "question": 23,
    "text": "Manually manage the foreign key relationship using a UUIDField",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 93,
  "fields": {
    "question": 23,
    "text": "Use a custom database router",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 94,
  "fields": {
    "question": 23,
    "text": "Cross-database foreign keys are not supported in Django",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 95,
  "fields": {
    "question": 24,
    "text": "django-celery",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 96,
  "fields": {
    "question": 24,
    "text": "flask-celery",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 97,
  "fields": {
    "question": 24,
    "text": "celery-django",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 98,
  "fields": {
    "question": 24,
    "text": "django-rest-framework",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 99,
  "fields": {
    "question": 25,
    "text": "Use the SearchVector and SearchQuery classes from django.contrib.postgres.search",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 100,
  "fields": {
    "question": 25,
    "text": "Use filter() with icontains",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 101,
  "fields": {
    "question": 25,
    "text": "Use raw SQL queries",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 102,
  "fields": {
    "question": 25,
    "text": "Django does not support full-text search",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 103,
  "fields": {
    "question": 26,
    "text": "Create a custom class inheriting from SimpleListFilter and add it to the list_filter attribute",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 104,
  "fields": {
    "question": 26,
    "text": "Use the @list_filter decorator",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 105,
  "fields": {
    "question": 26,
    "text": "Set custom_filter=True in settings.py",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 106,
  "fields": {
    "question": 26,
    "text": "Override the get_queryset() method",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 107,
  "fields": {
    "question": 27,
    "text": "validate_and_save()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 108,
  "fields": {
    "question": 27,
    "text": "is_valid() followed by save()",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 109,
  "fields": {
    "question": 27,
    "text": "commit()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 110,
  "fields": {
    "question": 27,
    "text": "form_save()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 111,
  "fields": {
    "question": 28,
    "text": "post_delete",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 112,
  "fields": {
    "question": 28,
    "text": "pre_save",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 113,
  "fields": {
    "question": 28,
    "text": "post_save",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 114,
  "fields": {
    "question": 28,
    "text": "pre_delete",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 115,
  "fields": {
    "question": 29,
    "text": "Override the __init__() method of the serializer to modify fields dynamically",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 116,
  "fields": {
    "question": 29,
    "text": "Use the @custom_field decorator",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 117,
  "fields": {
    "question": 29,
    "text": "Add a context attribute to the serializer",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 118,
  "fields": {
    "question": 29,
    "text": "Set the fields attribute in the model",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 119,
  "fields": {
    "question": 30,
    "text": "Set the depth attribute in the serializer",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 120,
  "fields": {
    "question": 30,
    "text": "Use the ForeignKeySerializer class",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 121,
  "fields": {
    "question": 30,
    "text": "Override the get_queryset() method",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 122,
  "fields": {
    "question": 30,
    "text": "Use the @depth decorator",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 123,
  "fields": {
    "question": 31,
    "text": "Use the distinct() method on the queryset",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 124,
  "fields": {
    "question": 31,
    "text": "Use the unique=True attribute in the model",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 125,
  "fields": {
    "question": 31,
    "text": "Use the all() method",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 126,
  "fields": {
    "question": 31,
    "text": "Use raw SQL queries",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 127,
  "fields": {
    "question": 32,
    "text": "Call admin.site.register() with the model",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 128,
  "fields": {
    "question": 32,
    "text": "Add the model to settings.py",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 129,
  "fields": {
    "question": 32,
    "text": "Use the 'register_model' decorator on the model class",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 130,
  "fields": {
    "question": 32,
    "text": "Create a new admin user",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 131,
  "fields": {
    "question": 33,
    "text": "@csrf_protect",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 132,
  "fields": {
    "question": 33,
    "text": "@require_POST",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 133,
  "fields": {
    "question": 33,
    "text": "@login_required",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 134,
  "fields": {
    "question": 33,
    "text": "@staff_member_required",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 135,
  "fields": {
    "question": 34,
    "text": "Use the partial=True argument in the serializer's update() method",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 136,
  "fields": {
    "question": 34,
    "text": "Override the save() method",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 137,
  "fields": {
    "question": 34,
    "text": "Set update_partial=True in the viewset",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 138,
  "fields": {
    "question": 34,
    "text": "Use the @partial_update decorator",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 139,
  "fields": {
    "question": 35,
    "text": "blank=True",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 140,
  "fields": {
    "question": 35,
    "text": "null=True",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 141,
  "fields": {
    "question": 35,
    "text": "blank=True, null=True",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 142,
  "fields": {
    "question": 35,
    "text": "optional=True",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 143,
  "fields": {
    "question": 36,
    "text": "Use 'sudo apt install package_name'",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 144,
  "fields": {
    "question": 36,
    "text": "Run 'install package_name'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 145,
  "fields": {
    "question": 36,
    "text": "Type 'apt-get package_name'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 146,
  "fields": {
    "question": 36,
    "text": "Use 'package-install name'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 147,
  "fields": {
    "question": 37,
    "text": "Varchar(20);",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 148,
  "fields": {
    "question": 37,
    "text": "None Of The Mentioned",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 149,
  "fields": {
    "question": 37,
    "text": "Varchar(20) Character Set;",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 150,
  "fields": {
    "question": 37,
    "text": "Varchar(20) Character Set Utf8;",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 151,
  "fields": {
    "question": 38,
    "text": "GROUP BY",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 152,
  "fields": {
    "question": 38,
    "text": "ORDER BY",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 153,
  "fields": {
    "question": 38,
    "text": "SORT BY",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 154,
  "fields": {
    "question": 38,
    "text": "AGGREGATE",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 155,
  "fields": {
    "question": 39,
    "text": "id",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 156,
  "fields": {
    "question": 39,
    "text": "class",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 157,
  "fields": {
    "question": 39,
    "text": "name",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 158,
  "fields": {
    "question": 39,
    "text": "type",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 159,
  "fields": {
    "question": 40,
    "text": "Equi-join",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 160,
  "fields": {
    "question": 40,
    "text": "All of the mentioned.",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 161,
  "fields": {
    "question": 40,
    "text": "Outer join",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 162,
  "fields": {
    "question": 40,
    "text": "Natural join",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 163,
  "fields": {
    "question": 40,
    "text": "None of the mentioned.",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 164,
  "fields": {
    "question": 41,
    "text": "SHOW DATABASES;",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 165,
  "fields": {
    "question": 41,
    "text": "LIST ALL;",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 166,
  "fields": {
    "question": 41,
    "text": "SHOW ALL;",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 167,
  "fields": {
    "question": 41,
    "text": "DATABASES;",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 168,
  "fields": {
    "question": 42,
    "text": "SMALLINT",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 169,
  "fields": {
    "question": 42,
    "text": "DECIMAL(18,4)",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 170,
  "fields": {
    "question": 42,
    "text": "VARCHAR(32)",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 171,
  "fields": {
    "question": 42,
    "text": "BIGINT",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 172,
  "fields": {
    "question": 43,
    "text": "UNIQUE",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 173,
  "fields": {
    "question": 43,
    "text": "DISTINCT",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 174,
  "fields": {
    "question": 43,
    "text": "LIMIT",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 175,
  "fields": {
    "question": 43,
    "text": "FILTER",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 176,
  "fields": {
    "question": 44,
    "text": "English",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 177,
  "fields": {
    "question": 44,
    "text": "The Structured Query Language",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 178,
  "fields": {
    "question": 44,
    "text": "Your Choice From Perl, PHP, Java Or Some Other Languages",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 179,
  "fields": {
    "question": 44,
    "text": "Swedish",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 180,
  "fields": {
    "question": 44,
    "text": "Binary",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 181,
  "fields": {
    "question": 45,
    "text": "GROUP BY with multiple columns",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 182,
  "fields": {
    "question": 45,
    "text": "HAVING with multiple columns",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 183,
  "fields": {
    "question": 45,
    "text": "JOIN with GROUP BY",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 184,
  "fields": {
    "question": 45,
    "text": "UNION with GROUP BY",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 185,
  "fields": {
    "question": 46,
    "text": "COPY TABLE table_name",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 186,
  "fields": {
    "question": 46,
    "text": "CREATE TABLE backup_table AS SELECT * FROM table_name",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 187,
  "fields": {
    "question": 46,
    "text": "BACKUP TABLE table_name",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 188,
  "fields": {
    "question": 46,
    "text": "CLONE TABLE table_name",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 189,
  "fields": {
    "question": 47,
    "text": "eliminates all repeated rows from the result set",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 190,
  "fields": {
    "question": 47,
    "text": "allows you to combine the results of individual queries across multiple tables into a single result table",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 191,
  "fields": {
    "question": 47,
    "text": "converts the value of a column or function to a different type",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 192,
  "fields": {
    "question": 47,
    "text": "changes the order of output rows",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 193,
  "fields": {
    "question": 48,
    "text": "255",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 194,
  "fields": {
    "question": 48,
    "text": "2 (True And False)",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 195,
  "fields": {
    "question": 48,
    "text": "65535",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 196,
  "fields": {
    "question": 48,
    "text": "7",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 197,
  "fields": {
    "question": 49,
    "text": "SUM()",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 198,
  "fields": {
    "question": 49,
    "text": "COUNT()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 199,
  "fields": {
    "question": 49,
    "text": "TOTAL()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 200,
  "fields": {
    "question": 49,
    "text": "AGGREGATE()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 201,
  "fields": {
    "question": 50,
    "text": "Use COUNT(CASE WHEN condition THEN 1 END)",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 202,
  "fields": {
    "question": 50,
    "text": "Use SUM with WHERE",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 203,
  "fields": {
    "question": 50,
    "text": "Use GROUP BY and JOIN",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 204,
  "fields": {
    "question": 50,
    "text": "Use HAVING with COUNT",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 205,
  "fields": {
    "question": 51,
    "text": "CREATE VIEW",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 206,
  "fields": {
    "question": 51,
    "text": "CREATE DATABASE",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 207,
  "fields": {
    "question": 51,
    "text": "CREATE TRIGGER",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 208,
  "fields": {
    "question": 51,
    "text": "CREATE SCHEMA",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 209,
  "fields": {
    "question": 52,
    "text": "NOW()",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 210,
  "fields": {
    "question": 52,
    "text": "CURDATE()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 211,
  "fields": {
    "question": 52,
    "text": "TODAY()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 212,
  "fields": {
    "question": 52,
    "text": "TIME()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 213,
  "fields": {
    "question": 53,
    "text": "Use 'sudo dpkg --configure -a'",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 214,
  "fields": {
    "question": 53,
    "text": "Run 'fix-broken-dpkg'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 215,
  "fields": {
    "question": 53,
    "text": "Type 'dpkg-repair'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 216,
  "fields": {
    "question": 53,
    "text": "Use 'dpkg-config fix'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 217,
  "fields": {
    "question": 54,
    "text": "Use 'apt list --upgradable'",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 218,
  "fields": {
    "question": 54,
    "text": "Run 'check-updates'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 219,
  "fields": {
    "question": 54,
    "text": "Type 'list-updates'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 220,
  "fields": {
    "question": 54,
    "text": "Use 'apt-upgradeable'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 221,
  "fields": {
    "question": 55,
    "text": "Increase shared_buffers",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 222,
  "fields": {
    "question": 55,
    "text": "Adjust wal_buffers and checkpoint_timeout",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 223,
  "fields": {
    "question": 55,
    "text": "Enable synchronous_commit",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 224,
  "fields": {
    "question": 55,
    "text": "Increase max_wal_size",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 225,
  "fields": {
    "question": 56,
    "text": "Use LIKE with wildcards",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 226,
  "fields": {
    "question": 56,
    "text": "Create trigram indexes with pg_trgm",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 227,
  "fields": {
    "question": 56,
    "text": "Full-text search with tsvector",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 228,
  "fields": {
    "question": 56,
    "text": "Regular expressions",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 229,
  "fields": {
    "question": 57,
    "text": "Multiple joins",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 230,
  "fields": {
    "question": 57,
    "text": "WITH RECURSIVE with indexed path and depth tracking",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 231,
  "fields": {
    "question": 57,
    "text": "Stored procedure",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 232,
  "fields": {
    "question": 57,
    "text": "Materialized path",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 233,
  "fields": {
    "question": 58,
    "text": "Increase work_mem",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 234,
  "fields": {
    "question": 58,
    "text": "Implement grouping sets with incremental spill to disk",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 235,
  "fields": {
    "question": 58,
    "text": "Use plain aggregation",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 236,
  "fields": {
    "question": 58,
    "text": "Disable hash aggregation",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 237,
  "fields": {
    "question": 59,
    "text": "Create individual indexes",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 238,
  "fields": {
    "question": 59,
    "text": "Create multi-column index matching ORDER BY clause",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 239,
  "fields": {
    "question": 59,
    "text": "Use temporary tables",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 240,
  "fields": {
    "question": 59,
    "text": "Increase work_mem",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 241,
  "fields": {
    "question": 60,
    "text": "Separate indexes for each condition",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 242,
  "fields": {
    "question": 60,
    "text": "B-tree index with included columns",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 243,
  "fields": {
    "question": 60,
    "text": "Hash index",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 244,
  "fields": {
    "question": 60,
    "text": "GiST index",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 245,
  "fields": {
    "question": 61,
    "text": "Individual upserts",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 246,
  "fields": {
    "question": 61,
    "text": "Batch upserts with deferred constraints and conflict resolution functions",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 247,
  "fields": {
    "question": 61,
    "text": "Separate insert/update",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 248,
  "fields": {
    "question": 61,
    "text": "Use triggers",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 249,
  "fields": {
    "question": 62,
    "text": "Polling the database at regular intervals",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 250,
  "fields": {
    "question": 62,
    "text": "Using LISTEN/NOTIFY with triggers",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 251,
  "fields": {
    "question": 62,
    "text": "Creating temporary tables",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 252,
  "fields": {
    "question": 62,
    "text": "Using materialized views",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 253,
  "fields": {
    "question": 63,
    "text": "Single sequence",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 254,
  "fields": {
    "question": 63,
    "text": "Partitioned sequences with cache settings",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 255,
  "fields": {
    "question": 63,
    "text": "UUID generation",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 256,
  "fields": {
    "question": 63,
    "text": "Application-generated keys",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 257,
  "fields": {
    "question": 64,
    "text": "WAL logs",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 258,
  "fields": {
    "question": 64,
    "text": "GENERATED ALWAYS AS",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 259,
  "fields": {
    "question": 64,
    "text": "Logical decoding",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 260,
  "fields": {
    "question": 64,
    "text": "Session logs",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 261,
  "fields": {
    "question": 65,
    "text": "Multiple LIKE queries",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 262,
  "fields": {
    "question": 65,
    "text": "Multiple tsvector columns with appropriate dictionaries",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 263,
  "fields": {
    "question": 65,
    "text": "Regular expressions",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 264,
  "fields": {
    "question": 65,
    "text": "External search engine",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 265,
  "fields": {
    "question": 66,
    "text": "Lock metadata",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 266,
  "fields": {
    "question": 66,
    "text": "Versioned metadata with MVCC-based access",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 267,
  "fields": {
    "question": 66,
    "text": "Update directly",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 268,
  "fields": {
    "question": 66,
    "text": "Use triggers",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 269,
  "fields": {
    "question": 67,
    "text": "String concatenation",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 270,
  "fields": {
    "question": 67,
    "text": "EXECUTE format() with parameters",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 271,
  "fields": {
    "question": 67,
    "text": "Using views",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 272,
  "fields": {
    "question": 67,
    "text": "Multiple stored procedures",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 273,
  "fields": {
    "question": 68,
    "text": "Regular COPY",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 274,
  "fields": {
    "question": 68,
    "text": "Staged COPY with transformation functions and parallel processing",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 275,
  "fields": {
    "question": 68,
    "text": "Multiple INSERT statements",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 276,
  "fields": {
    "question": 68,
    "text": "Bulk load",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 277,
  "fields": {
    "question": 69,
    "text": "Single language configuration",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 278,
  "fields": {
    "question": 69,
    "text": "Multiple tsvector columns with language-specific weights and dictionaries",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 279,
  "fields": {
    "question": 69,
    "text": "Regular text search",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 280,
  "fields": {
    "question": 69,
    "text": "Pattern matching",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 281,
  "fields": {
    "question": 70,
    "text": "Using stored procedures",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 282,
  "fields": {
    "question": 70,
    "text": "Creating aggregate functions with CREATE AGGREGATE",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 283,
  "fields": {
    "question": 70,
    "text": "Using window functions",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 284,
  "fields": {
    "question": 70,
    "text": "Writing triggers",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 285,
  "fields": {
    "question": 71,
    "text": "Regular indexes",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 286,
  "fields": {
    "question": 71,
    "text": "Partial indexes on active paths with materialized ancestors",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 287,
  "fields": {
    "question": 71,
    "text": "Full table scan",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 288,
  "fields": {
    "question": 71,
    "text": "Using CTEs",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 289,
  "fields": {
    "question": 72,
    "text": "To optimize query execution plans",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 290,
  "fields": {
    "question": 72,
    "text": "To reclaim storage occupied by dead tuples and update statistics",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 291,
  "fields": {
    "question": 72,
    "text": "To verify data integrity",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 292,
  "fields": {
    "question": 72,
    "text": "To compress table data",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 293,
  "fields": {
    "question": 73,
    "text": "Using SERIAL primary keys",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 294,
  "fields": {
    "question": 73,
    "text": "ON CONFLICT DO UPDATE with version checking",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 295,
  "fields": {
    "question": 73,
    "text": "Using triggers",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 296,
  "fields": {
    "question": 73,
    "text": "Manual conflict checking",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 297,
  "fields": {
    "question": 74,
    "text": "pg_partman",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 298,
  "fields": {
    "question": 74,
    "text": "pg_partition",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 299,
  "fields": {
    "question": 74,
    "text": "auto_partition",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 300,
  "fields": {
    "question": 74,
    "text": "partition_manager",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 301,
  "fields": {
    "question": 75,
    "text": "An object that implements a 'then' method",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 302,
  "fields": {
    "question": 75,
    "text": "A Promise that chains multiple resolutions",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 303,
  "fields": {
    "question": 75,
    "text": "A synchronous version of a Promise",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 304,
  "fields": {
    "question": 75,
    "text": "An error handler for rejected Promises",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 305,
  "fields": {
    "question": 76,
    "text": "Adjust the V8 heap size using `--max-old-space-size` and `--max-semi-space-size`",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 306,
  "fields": {
    "question": 76,
    "text": "Disable garbage collection and manage memory manually",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 307,
  "fields": {
    "question": 76,
    "text": "Enable the `--gc-optimizer` flag",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 308,
  "fields": {
    "question": 76,
    "text": "Use `global.optimizeGC()`",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 309,
  "fields": {
    "question": 77,
    "text": "Always attach at least one listener for the 'error' event",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 310,
  "fields": {
    "question": 77,
    "text": "Emit the 'error' event without attaching any listeners",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 311,
  "fields": {
    "question": 77,
    "text": "Catch the error in a try-catch block",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 312,
  "fields": {
    "question": 77,
    "text": "Ignore the 'error' event if no listener is required",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 313,
  "fields": {
    "question": 78,
    "text": "It allows simultaneous read and write operations in a single stream",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 314,
  "fields": {
    "question": 78,
    "text": "It disables backpressure for writable streams",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 315,
  "fields": {
    "question": 78,
    "text": "It converts all data into JSON format",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 316,
  "fields": {
    "question": 78,
    "text": "It buffers all data before processing",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 317,
  "fields": {
    "question": 79,
    "text": "If the provided encoding is supported by Node.js",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 318,
  "fields": {
    "question": 79,
    "text": "If the Buffer uses the specified encoding",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 319,
  "fields": {
    "question": 79,
    "text": "If the Buffer can be converted to the encoding",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 320,
  "fields": {
    "question": 79,
    "text": "If the encoding matches the system default",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 321,
  "fields": {
    "question": 80,
    "text": "It allows the stream to handle objects instead of buffers or strings",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 322,
  "fields": {
    "question": 80,
    "text": "It optimizes the stream for binary data",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 323,
  "fields": {
    "question": 80,
    "text": "It prevents the stream from being piped to writable streams",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 324,
  "fields": {
    "question": 80,
    "text": "It disables backpressure in the stream",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 325,
  "fields": {
    "question": 81,
    "text": "Use `performance.mark()` and `performance.measure()` from the `perf_hooks` module",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 326,
  "fields": {
    "question": 81,
    "text": "Enable the `--operation-timing` flag",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 327,
  "fields": {
    "question": 81,
    "text": "Use `console.time()` and `console.timeEnd()`",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 328,
  "fields": {
    "question": 81,
    "text": "Call `process.monitorOperations()`",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 329,
  "fields": {
    "question": 82,
    "text": "A Promise that resolves when the write completes",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 330,
  "fields": {
    "question": 82,
    "text": "True if the data was written immediately, otherwise false",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 331,
  "fields": {
    "question": 82,
    "text": "The number of bytes written",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 332,
  "fields": {
    "question": 82,
    "text": "A callback function to indicate completion",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 333,
  "fields": {
    "question": 83,
    "text": "Use 'eventEmitter.listenerCount(eventName) > 0'",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 334,
  "fields": {
    "question": 83,
    "text": "Use 'eventEmitter.hasListeners(eventName)'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 335,
  "fields": {
    "question": 83,
    "text": "Use 'eventEmitter.getListeners(eventName).length > 0'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 336,
  "fields": {
    "question": 83,
    "text": "Use 'eventEmitter.eventCount(eventName) > 0'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 337,
  "fields": {
    "question": 84,
    "text": "buffer.toJSON()",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 338,
  "fields": {
    "question": 84,
    "text": "JSON.stringify(buffer)",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 339,
  "fields": {
    "question": 84,
    "text": "Buffer.toJson(buffer)",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 340,
  "fields": {
    "question": 84,
    "text": "buffer.toString('json')",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 341,
  "fields": {
    "question": 85,
    "text": "worker.filename",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 342,
  "fields": {
    "question": 85,
    "text": "worker.filepath",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 343,
  "fields": {
    "question": 85,
    "text": "worker.threadFile",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 344,
  "fields": {
    "question": 85,
    "text": "worker.script",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 345,
  "fields": {
    "question": 86,
    "text": "The command is executed without any arguments",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 346,
  "fields": {
    "question": 86,
    "text": "The child process fails to start",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 347,
  "fields": {
    "question": 86,
    "text": "The parent process is terminated",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 348,
  "fields": {
    "question": 86,
    "text": "Default arguments are automatically applied",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 349,
  "fields": {
    "question": 87,
    "text": "Do not attach a 'data' event listener or call `read()`",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 350,
  "fields": {
    "question": 87,
    "text": "Set the `autoFlow` option to `false`",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 351,
  "fields": {
    "question": 87,
    "text": "Use `stream.pause()` immediately after creation",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 352,
  "fields": {
    "question": 87,
    "text": "Readable streams always flow automatically",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 353,
  "fields": {
    "question": 88,
    "text": "crypto.privateDecrypt(key, buffer)",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 354,
  "fields": {
    "question": 88,
    "text": "crypto.decrypt(key, buffer)",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 355,
  "fields": {
    "question": 88,
    "text": "crypto.publicDecrypt(key, buffer)",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 356,
  "fields": {
    "question": 88,
    "text": "crypto.keyDecrypt(key, buffer)",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 357,
  "fields": {
    "question": 89,
    "text": "Listen for the 'drain' event before writing more data",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 358,
  "fields": {
    "question": 89,
    "text": "Pause the stream permanently",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 359,
  "fields": {
    "question": 89,
    "text": "Increase the 'highWaterMark' value",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 360,
  "fields": {
    "question": 89,
    "text": "Flush the buffer immediately",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 361,
  "fields": {
    "question": 90,
    "text": "fs.writeFile()",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 362,
  "fields": {
    "question": 90,
    "text": "fs.appendFile()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 363,
  "fields": {
    "question": 90,
    "text": "fs.open()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 364,
  "fields": {
    "question": 90,
    "text": "fs.readFile()",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 365,
  "fields": {
    "question": 91,
    "text": "Provides constants for process signals",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 366,
  "fields": {
    "question": 91,
    "text": "Manages OS-level process priorities",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 367,
  "fields": {
    "question": 91,
    "text": "Logs system signal usage",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 368,
  "fields": {
    "question": 91,
    "text": "Schedules processes for execution",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 369,
  "fields": {
    "question": 92,
    "text": "Enable support for SSLv3 and TLSv1.0 using the `secureProtocol` option",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 370,
  "fields": {
    "question": 92,
    "text": "Use the `allowLegacyProtocols` flag in the TLS configuration",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 371,
  "fields": {
    "question": 92,
    "text": "Allow the client to negotiate a compatible protocol automatically",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 372,
  "fields": {
    "question": 92,
    "text": "There is no way to support legacy clients with outdated protocols in Node.js",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 373,
  "fields": {
    "question": 93,
    "text": "It configures the input/output streams between the parent and child processes",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 374,
  "fields": {
    "question": 93,
    "text": "It buffers the output of the child process",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 375,
  "fields": {
    "question": 93,
    "text": "It determines the number of child processes that can be forked",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 376,
  "fields": {
    "question": 93,
    "text": "It limits the memory usage of the child process",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 377,
  "fields": {
    "question": 94,
    "text": "npm install <package_name>",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 378,
  "fields": {
    "question": 94,
    "text": "npm install -g <package_name>",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 379,
  "fields": {
    "question": 94,
    "text": "npm add -g <package_name>",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 380,
  "fields": {
    "question": 94,
    "text": "npm download <package_name>",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 381,
  "fields": {
    "question": 95,
    "text": "Use 'sudo ufw allow from IP_ADDRESS to any port 3306'",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 382,
  "fields": {
    "question": 95,
    "text": "Run 'ufw mysql-access IP_ADDRESS'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 383,
  "fields": {
    "question": 95,
    "text": "Type 'allow-port mysql IP_ADDRESS'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 384,
  "fields": {
    "question": 95,
    "text": "Use 'ufw open 3306 from IP'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 385,
  "fields": {
    "question": 96,
    "text": "Edit '/etc/ssh/sshd_config' and set 'PermitRootLogin no', then restart SSH with 'sudo systemctl restart sshd'",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 386,
  "fields": {
    "question": 96,
    "text": "Run 'ssh-config no-root'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 387,
  "fields": {
    "question": 96,
    "text": "Type 'disable-root-ssh'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 388,
  "fields": {
    "question": 96,
    "text": "Use 'restrict-root ssh'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 389,
  "fields": {
    "question": 97,
    "text": "Edit '/etc/ssh/sshd_config' and set 'PasswordAuthentication no', then restart SSH",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 390,
  "fields": {
    "question": 97,
    "text": "Run 'ssh-config disable-password'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 391,
  "fields": {
    "question": 97,
    "text": "Type 'disable-password-auth ssh'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 392,
  "fields": {
    "question": 97,
    "text": "Use 'ssh set key-only'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 393,
  "fields": {
    "question": 98,
    "text": "Use 'sudo ufw logging on'",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 394,
  "fields": {
    "question": 98,
    "text": "Run 'ufw log denied'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 395,
  "fields": {
    "question": 98,
    "text": "Type 'firewall log on'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 396,
  "fields": {
    "question": 98,
    "text": "Use 'enable-log ufw'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 397,
  "fields": {
    "question": 99,
    "text": "Use 'sudo ufw default deny outgoing', then 'sudo ufw allow out 53', 'sudo ufw allow out 80'",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 398,
  "fields": {
    "question": 99,
    "text": "Run 'ufw block all except dns http'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 399,
  "fields": {
    "question": 99,
    "text": "Type 'firewall set rules out'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 400,
  "fields": {
    "question": 99,
    "text": "Use 'ufw deny except'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 401,
  "fields": {
    "question": 100,
    "text": "Edit '/etc/fail2ban/jail.local' and add the IP to 'ignoreip' under '[DEFAULT]'",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 402,
  "fields": {
    "question": 100,
    "text": "Run 'fail2ban ignore-ip add'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 403,
  "fields": {
    "question": 100,
    "text": "Type 'add-to-ignore fail2ban'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 404,
  "fields": {
    "question": 100,
    "text": "Use 'ignore-list fail2ban'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 405,
  "fields": {
    "question": 101,
    "text": "Install 'knockd' and configure '/etc/knockd.conf' with the desired sequence",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 406,
  "fields": {
    "question": 101,
    "text": "Run 'portknock setup'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 407,
  "fields": {
    "question": 101,
    "text": "Type 'knocking-config ssh'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 408,
  "fields": {
    "question": 101,
    "text": "Use 'set-port-knock'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 409,
  "fields": {
    "question": 102,
    "text": "Use 'sudo ufw default deny incoming' followed by 'sudo ufw allow ssh', 'sudo ufw allow http', and 'sudo ufw allow https'",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 410,
  "fields": {
    "question": 102,
    "text": "Run 'ufw deny all except web'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 411,
  "fields": {
    "question": 102,
    "text": "Type 'ufw config allow ssh, http, https'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 412,
  "fields": {
    "question": 102,
    "text": "Use 'firewall web-allow'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 413,
  "fields": {
    "question": 103,
    "text": "Use 'sudo ufw allow 443/tcp'",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 414,
  "fields": {
    "question": 103,
    "text": "Run 'ufw open https'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 415,
  "fields": {
    "question": 103,
    "text": "Type 'firewall allow secure-web'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 416,
  "fields": {
    "question": 103,
    "text": "Use 'ufw permit https'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 417,
  "fields": {
    "question": 104,
    "text": "Use 'sudo ufw allow from IP_ADDRESS'",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 418,
  "fields": {
    "question": 104,
    "text": "Run 'ufw allow ip'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 419,
  "fields": {
    "question": 104,
    "text": "Type 'firewall allow single-ip'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 420,
  "fields": {
    "question": 104,
    "text": "Use 'ufw allow address'",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 421,
  "fields": {
    "question": 279,
    "text": "Adjust the V8 heap size using `--max-old-space-size` and `--max-semi-space-size`",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 422,
  "fields": {
    "question": 279,
    "text": "Disable garbage collection and manage memory manually",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 423,
  "fields": {
    "question": 279,
    "text": "Enable the `--gc-optimizer` flag",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 424,
  "fields": {
    "question": 279,
    "text": "Use `global.optimizeGC()`",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 425,
  "fields": {
    "question": 282,
    "text": "Adjust the V8 heap size using `--max-old-space-size` and `--max-semi-space-size`",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 426,
  "fields": {
    "question": 282,
    "text": "Disable garbage collection and manage memory manually",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 427,
  "fields": {
    "question": 282,
    "text": "Enable the `--gc-optimizer` flag",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 428,
  "fields": {
    "question": 282,
    "text": "Use `global.optimizeGC()`",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 429,
  "fields": {
    "question": 286,
    "text": "Adjust the V8 heap size using `--max-old-space-size` and `--max-semi-space-size`",
    "is_correct": true
  }
},
{
  "model": "questions.mcq",
  "pk": 430,
  "fields": {
    "question": 286,
    "text": "Disable garbage collection and manage memory manually",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 431,
  "fields": {
    "question": 286,
    "text": "Enable the `--gc-optimizer` flag",
    "is_correct": false
  }
},
{
  "model": "questions.mcq",
  "pk": 432,
  "fields": {
    "question": 286,
    "text": "Use `global.optimizeGC()`",
    "is_correct": false
  }
},
{
  "model": "questions.matchingpair",
  "pk": 1,
  "fields": {
    "question": 156,
    "item": "fs",
    "match": "File system"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 2,
  "fields": {
    "question": 156,
    "item": "http",
    "match": "Create HTTP server"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 3,
  "fields": {
    "question": 156,
    "item": "os",
    "match": "Operating system-related utilities"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 4,
  "fields": {
    "question": 156,
    "item": "events",
    "match": "Event handling"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 5,
  "fields": {
    "question": 157,
    "item": "fs.readFileSync",
    "match": "Reads a file synchronously"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 6,
  "fields": {
    "question": 157,
    "item": "http.createServer",
    "match": "Creates an HTTP server"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 7,
  "fields": {
    "question": 157,
    "item": "setTimeout",
    "match": "Schedules a function to run after a delay"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 8,
  "fields": {
    "question": 157,
    "item": "process.exit",
    "match": "Terminates the Node.js process"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 9,
  "fields": {
    "question": 158,
    "item": "fs.readFile",
    "match": "Asynchronous I/O"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 10,
  "fields": {
    "question": 158,
    "item": "fs.writeFileSync",
    "match": "Synchronous I/O"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 11,
  "fields": {
    "question": 158,
    "item": "http.request",
    "match": "Network I/O"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 12,
  "fields": {
    "question": 158,
    "item": "console.log",
    "match": "Console I/O"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 13,
  "fields": {
    "question": 159,
    "item": "path",
    "match": "Working with file paths"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 14,
  "fields": {
    "question": 159,
    "item": "querystring",
    "match": "Parsing and formatting URL query strings"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 15,
  "fields": {
    "question": 159,
    "item": "stream",
    "match": "Handling streaming data"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 16,
  "fields": {
    "question": 159,
    "item": "url",
    "match": "URL resolution and parsing"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 17,
  "fields": {
    "question": 160,
    "item": "Express",
    "match": "Web framework"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 18,
  "fields": {
    "question": 160,
    "item": "Socket.io",
    "match": "Real-time communication"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 19,
  "fields": {
    "question": 160,
    "item": "Koa",
    "match": "Web framework (lighter than Express)"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 20,
  "fields": {
    "question": 160,
    "item": "Hapi",
    "match": "Web framework with built-in plugins"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 21,
  "fields": {
    "question": 161,
    "item": "data",
    "match": "Emitted when data is available to read"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 22,
  "fields": {
    "question": 161,
    "item": "end",
    "match": "Emitted when stream is finished"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 23,
  "fields": {
    "question": 161,
    "item": "close",
    "match": "Emitted when a stream or file is closed"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 24,
  "fields": {
    "question": 161,
    "item": "error",
    "match": "Emitted when an error occurs"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 25,
  "fields": {
    "question": 162,
    "item": "fs.unlink",
    "match": "Deletes a file"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 26,
  "fields": {
    "question": 162,
    "item": "os.platform",
    "match": "Returns the operating system platform"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 27,
  "fields": {
    "question": 162,
    "item": "process.argv",
    "match": "Contains command-line arguments"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 28,
  "fields": {
    "question": 162,
    "item": "http.get",
    "match": "Sends an HTTP GET request"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 29,
  "fields": {
    "question": 163,
    "item": "Event Loop",
    "match": "Handles asynchronous operations"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 30,
  "fields": {
    "question": 163,
    "item": "Non-blocking I/O",
    "match": "Operations that do not block the main thread"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 31,
  "fields": {
    "question": 163,
    "item": "Callback",
    "match": "Function passed to be executed later"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 32,
  "fields": {
    "question": 163,
    "item": "Promise",
    "match": "Represents an eventual result of an asynchronous operation"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 33,
  "fields": {
    "question": 164,
    "item": "process",
    "match": "Provides information about the current Node.js process"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 34,
  "fields": {
    "question": 164,
    "item": "module",
    "match": "Represents the current module"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 35,
  "fields": {
    "question": 164,
    "item": "global",
    "match": "Represents the global namespace"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 36,
  "fields": {
    "question": 164,
    "item": "Buffer",
    "match": "Handles raw binary data"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 37,
  "fields": {
    "question": 165,
    "item": "Asynchronous programming",
    "match": "Operations that are executed independently of the main thread"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 38,
  "fields": {
    "question": 165,
    "item": "Event-driven programming",
    "match": "Code execution is based on event handling"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 39,
  "fields": {
    "question": 165,
    "item": "Single-threaded model",
    "match": "The main thread handles I/O operations"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 40,
  "fields": {
    "question": 165,
    "item": "Streams",
    "match": "Used for processing large volumes of data in chunks"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 41,
  "fields": {
    "question": 166,
    "item": "INTEGER",
    "match": "Whole numbers"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 42,
  "fields": {
    "question": 166,
    "item": "VARCHAR",
    "match": "Variable-length character strings"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 43,
  "fields": {
    "question": 166,
    "item": "BOOLEAN",
    "match": "True or false values"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 44,
  "fields": {
    "question": 166,
    "item": "DATE",
    "match": "Calendar date (year, month, day)"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 45,
  "fields": {
    "question": 167,
    "item": "CREATE TABLE",
    "match": "Creates a new table in the database"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 46,
  "fields": {
    "question": 167,
    "item": "SELECT",
    "match": "Retrieves data from the database"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 47,
  "fields": {
    "question": 167,
    "item": "INSERT INTO",
    "match": "Inserts new data into a table"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 48,
  "fields": {
    "question": 167,
    "item": "DROP DATABASE",
    "match": "Deletes a database"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 49,
  "fields": {
    "question": 168,
    "item": "B-tree",
    "match": "The default and most common index type"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 50,
  "fields": {
    "question": 168,
    "item": "GIN",
    "match": "Used for indexing full-text search and arrays"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 51,
  "fields": {
    "question": 168,
    "item": "GIST",
    "match": "Used for spatial data types like geometry"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 52,
  "fields": {
    "question": 168,
    "item": "HASH",
    "match": "Used for equality comparisons only"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 53,
  "fields": {
    "question": 169,
    "item": "INNER JOIN",
    "match": "Returns rows with matching values in both tables"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 54,
  "fields": {
    "question": 169,
    "item": "LEFT JOIN",
    "match": "Returns all rows from the left table and matching rows from the right table"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 55,
  "fields": {
    "question": 169,
    "item": "RIGHT JOIN",
    "match": "Returns all rows from the right table and matching rows from the left table"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 56,
  "fields": {
    "question": 169,
    "item": "FULL JOIN",
    "match": "Returns rows when there is a match in either left or right table"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 57,
  "fields": {
    "question": 170,
    "item": "Atomicity",
    "match": "Ensures that all operations in a transaction are completed successfully or none at all"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 58,
  "fields": {
    "question": 170,
    "item": "Consistency",
    "match": "Ensures that the database transitions from one valid state to another"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 59,
  "fields": {
    "question": 170,
    "item": "Isolation",
    "match": "Ensures that transactions are executed independently"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 60,
  "fields": {
    "question": 170,
    "item": "Durability",
    "match": "Ensures that changes from a committed transaction are permanent"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 61,
  "fields": {
    "question": 171,
    "item": "PRIMARY KEY",
    "match": "Uniquely identifies each record in a table"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 62,
  "fields": {
    "question": 171,
    "item": "FOREIGN KEY",
    "match": "Ensures the integrity of the relationship between two tables"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 63,
  "fields": {
    "question": 171,
    "item": "CHECK",
    "match": "Ensures that all values in a column satisfy a specified condition"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 64,
  "fields": {
    "question": 171,
    "item": "UNIQUE",
    "match": "Ensures that all values in a column are distinct"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 65,
  "fields": {
    "question": 172,
    "item": "Aggregate functions",
    "match": "Performs a calculation on a set of values and returns a single result"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 66,
  "fields": {
    "question": 172,
    "item": "Scalar functions",
    "match": "Returns a single value based on input arguments"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 67,
  "fields": {
    "question": 172,
    "item": "Window functions",
    "match": "Performs calculations across a set of table rows related to the current row"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 68,
  "fields": {
    "question": 172,
    "item": "Set-returning functions",
    "match": "Returns a result set instead of a single value"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 69,
  "fields": {
    "question": 173,
    "item": "Relational model",
    "match": "Uses tables to represent data and relationships between them"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 70,
  "fields": {
    "question": 173,
    "item": "Object-relational model",
    "match": "Extends the relational model with object-oriented concepts"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 71,
  "fields": {
    "question": 173,
    "item": "Document-based model",
    "match": "Stores data in a document format, like JSON or BSON"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 72,
  "fields": {
    "question": 173,
    "item": "Key-value store",
    "match": "Stores data as key-value pairs, similar to NoSQL"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 73,
  "fields": {
    "question": 174,
    "item": "SELECT",
    "match": "FROM"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 74,
  "fields": {
    "question": 174,
    "item": "INSERT",
    "match": "INTO"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 75,
  "fields": {
    "question": 174,
    "item": "UPDATE",
    "match": "SET"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 76,
  "fields": {
    "question": 174,
    "item": "DELETE",
    "match": "WHERE"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 77,
  "fields": {
    "question": 175,
    "item": "MVCC (Multi-Version Concurrency Control)",
    "match": "Allows multiple transactions to occur concurrently without interfering with each other"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 78,
  "fields": {
    "question": 175,
    "item": "Serializable",
    "match": "Ensures transactions are executed in a way that they appear sequential"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 79,
  "fields": {
    "question": 175,
    "item": "Read Committed",
    "match": "Ensures a transaction only sees committed data"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 80,
  "fields": {
    "question": 175,
    "item": "Repeatable Read",
    "match": "Ensures the same query in a transaction will always return the same result"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 81,
  "fields": {
    "question": 176,
    "item": "CharField",
    "match": "Stores short text strings"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 82,
  "fields": {
    "question": 176,
    "item": "IntegerField",
    "match": "Stores integer values"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 83,
  "fields": {
    "question": 176,
    "item": "DateField",
    "match": "Stores dates without time"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 84,
  "fields": {
    "question": 176,
    "item": "ForeignKey",
    "match": "Creates a many-to-one relationship"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 85,
  "fields": {
    "question": 177,
    "item": "Model.objects.create()",
    "match": "INSERT INTO"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 86,
  "fields": {
    "question": 177,
    "item": "Model.objects.filter()",
    "match": "SELECT ... WHERE"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 87,
  "fields": {
    "question": 177,
    "item": "Model.objects.update()",
    "match": "UPDATE ... SET"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 88,
  "fields": {
    "question": 177,
    "item": "Model.objects.delete()",
    "match": "DELETE FROM"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 89,
  "fields": {
    "question": 178,
    "item": "{% for ... %}",
    "match": "Loops over a sequence"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 90,
  "fields": {
    "question": 178,
    "item": "{% if ... %}",
    "match": "Adds conditional statements"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 91,
  "fields": {
    "question": 178,
    "item": "{% include ... %}",
    "match": "Includes another template"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 92,
  "fields": {
    "question": 178,
    "item": "{% csrf_token %}",
    "match": "Adds a CSRF token for forms"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 93,
  "fields": {
    "question": 179,
    "item": "200",
    "match": "OK - Successful request"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 94,
  "fields": {
    "question": 179,
    "item": "404",
    "match": "Not Found - Resource does not exist"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 95,
  "fields": {
    "question": 179,
    "item": "403",
    "match": "Forbidden - Access denied"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 96,
  "fields": {
    "question": 179,
    "item": "500",
    "match": "Internal Server Error"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 97,
  "fields": {
    "question": 180,
    "item": "SecurityMiddleware",
    "match": "Adds security-related headers to responses"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 98,
  "fields": {
    "question": 180,
    "item": "SessionMiddleware",
    "match": "Enables session support"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 99,
  "fields": {
    "question": 180,
    "item": "CsrfViewMiddleware",
    "match": "Protects against Cross-Site Request Forgery"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 100,
  "fields": {
    "question": 180,
    "item": "AuthenticationMiddleware",
    "match": "Associates users with requests"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 101,
  "fields": {
    "question": 181,
    "item": "INSTALLED_APPS",
    "match": "Defines the applications in the project"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 102,
  "fields": {
    "question": 181,
    "item": "MIDDLEWARE",
    "match": "Defines the middleware stack"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 103,
  "fields": {
    "question": 181,
    "item": "DATABASES",
    "match": "Configures the database connection"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 104,
  "fields": {
    "question": 181,
    "item": "STATIC_URL",
    "match": "Defines the URL for serving static files"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 105,
  "fields": {
    "question": 182,
    "item": "runserver",
    "match": "Starts the development server"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 106,
  "fields": {
    "question": 182,
    "item": "makemigrations",
    "match": "Creates new migrations based on model changes"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 107,
  "fields": {
    "question": 182,
    "item": "migrate",
    "match": "Applies migrations to the database"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 108,
  "fields": {
    "question": 182,
    "item": "createsuperuser",
    "match": "Creates a superuser account"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 109,
  "fields": {
    "question": 183,
    "item": "null=True",
    "match": "Allows NULL values in the database"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 110,
  "fields": {
    "question": 183,
    "item": "blank=True",
    "match": "Allows the field to be empty in forms"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 111,
  "fields": {
    "question": 183,
    "item": "unique=True",
    "match": "Ensures unique values in the database"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 112,
  "fields": {
    "question": 183,
    "item": "default=''",
    "match": "Provides a default value for the field"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 113,
  "fields": {
    "question": 184,
    "item": "pre_save",
    "match": "Triggered before a model is saved"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 114,
  "fields": {
    "question": 184,
    "item": "post_save",
    "match": "Triggered after a model is saved"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 115,
  "fields": {
    "question": 184,
    "item": "pre_delete",
    "match": "Triggered before a model is deleted"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 116,
  "fields": {
    "question": 184,
    "item": "post_delete",
    "match": "Triggered after a model is deleted"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 117,
  "fields": {
    "question": 185,
    "item": "get()",
    "match": "Retrieves a single object by a filter"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 118,
  "fields": {
    "question": 185,
    "item": "all()",
    "match": "Returns all objects in a queryset"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 119,
  "fields": {
    "question": 185,
    "item": "filter()",
    "match": "Returns objects matching a condition"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 120,
  "fields": {
    "question": 185,
    "item": "exclude()",
    "match": "Excludes objects matching a condition"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 121,
  "fields": {
    "question": 186,
    "item": "SELECT",
    "match": "Retrieves data from a database"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 122,
  "fields": {
    "question": 186,
    "item": "INSERT",
    "match": "Adds new records to a table"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 123,
  "fields": {
    "question": 186,
    "item": "UPDATE",
    "match": "Modifies existing records"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 124,
  "fields": {
    "question": 186,
    "item": "DELETE",
    "match": "Removes records from a table"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 125,
  "fields": {
    "question": 187,
    "item": "PRIMARY KEY",
    "match": "Uniquely identifies a record"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 126,
  "fields": {
    "question": 187,
    "item": "FOREIGN KEY",
    "match": "Links two tables together"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 127,
  "fields": {
    "question": 187,
    "item": "NOT NULL",
    "match": "Ensures a column cannot have NULL values"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 128,
  "fields": {
    "question": 187,
    "item": "UNIQUE",
    "match": "Ensures all values in a column are unique"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 129,
  "fields": {
    "question": 188,
    "item": "COUNT()",
    "match": "Counts the number of rows"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 130,
  "fields": {
    "question": 188,
    "item": "SUM()",
    "match": "Calculates the total of a column"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 131,
  "fields": {
    "question": 188,
    "item": "AVG()",
    "match": "Calculates the average value of a column"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 132,
  "fields": {
    "question": 188,
    "item": "MAX()",
    "match": "Finds the largest value in a column"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 133,
  "fields": {
    "question": 189,
    "item": "WHERE",
    "match": "Filters records based on a condition"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 134,
  "fields": {
    "question": 189,
    "item": "GROUP BY",
    "match": "Groups records based on a column"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 135,
  "fields": {
    "question": 189,
    "item": "HAVING",
    "match": "Filters groups based on a condition"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 136,
  "fields": {
    "question": 189,
    "item": "ORDER BY",
    "match": "Sorts records in a specific order"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 137,
  "fields": {
    "question": 190,
    "item": "INNER JOIN",
    "match": "Returns matching rows from both tables"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 138,
  "fields": {
    "question": 190,
    "item": "LEFT JOIN",
    "match": "Returns all rows from the left table and matching rows from the right table"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 139,
  "fields": {
    "question": 190,
    "item": "RIGHT JOIN",
    "match": "Returns all rows from the right table and matching rows from the left table"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 140,
  "fields": {
    "question": 190,
    "item": "FULL OUTER JOIN",
    "match": "Returns all rows from both tables"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 141,
  "fields": {
    "question": 191,
    "item": "VARCHAR",
    "match": "Variable-length string"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 142,
  "fields": {
    "question": 191,
    "item": "INT",
    "match": "Integer number"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 143,
  "fields": {
    "question": 191,
    "item": "DATE",
    "match": "Stores date values"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 144,
  "fields": {
    "question": 191,
    "item": "BOOLEAN",
    "match": "Stores true/false values"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 145,
  "fields": {
    "question": 192,
    "item": "CREATE",
    "match": "Creates a new table or database"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 146,
  "fields": {
    "question": 192,
    "item": "DROP",
    "match": "Deletes a table or database"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 147,
  "fields": {
    "question": 192,
    "item": "ALTER",
    "match": "Modifies an existing table structure"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 148,
  "fields": {
    "question": 192,
    "item": "TRUNCATE",
    "match": "Deletes all rows in a table without logging"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 149,
  "fields": {
    "question": 193,
    "item": "%",
    "match": "Represents zero or more characters"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 150,
  "fields": {
    "question": 193,
    "item": "_",
    "match": "Represents a single character"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 151,
  "fields": {
    "question": 193,
    "item": "[abc]",
    "match": "Represents any single character in the set"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 152,
  "fields": {
    "question": 193,
    "item": "[^abc]",
    "match": "Represents any single character not in the set"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 153,
  "fields": {
    "question": 194,
    "item": "COUNT()",
    "match": "Counts the number of rows"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 154,
  "fields": {
    "question": 194,
    "item": "SUM()",
    "match": "Adds up all numeric values"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 155,
  "fields": {
    "question": 194,
    "item": "AVG()",
    "match": "Calculates the mean of a column"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 156,
  "fields": {
    "question": 194,
    "item": "MIN()",
    "match": "Finds the smallest value in a column"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 157,
  "fields": {
    "question": 195,
    "item": "BEGIN",
    "match": "Starts a transaction"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 158,
  "fields": {
    "question": 195,
    "item": "COMMIT",
    "match": "Saves changes made during a transaction"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 159,
  "fields": {
    "question": 195,
    "item": "ROLLBACK",
    "match": "Undoes changes made during a transaction"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 160,
  "fields": {
    "question": 195,
    "item": "SAVEPOINT",
    "match": "Sets a point to which a transaction can be rolled back"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 161,
  "fields": {
    "question": 196,
    "item": "Variable",
    "match": "A named storage for data"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 162,
  "fields": {
    "question": 196,
    "item": "Function",
    "match": "A block of reusable code"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 163,
  "fields": {
    "question": 196,
    "item": "Loop",
    "match": "A structure for repeated execution"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 164,
  "fields": {
    "question": 196,
    "item": "Array",
    "match": "A collection of items stored at contiguous memory locations"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 165,
  "fields": {
    "question": 197,
    "item": "Object-Oriented Programming",
    "match": "Uses objects and classes"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 166,
  "fields": {
    "question": 197,
    "item": "Functional Programming",
    "match": "Relies on functions as first-class citizens"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 167,
  "fields": {
    "question": 197,
    "item": "Procedural Programming",
    "match": "Follows a step-by-step approach"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 168,
  "fields": {
    "question": 197,
    "item": "Declarative Programming",
    "match": "Describes what to do, not how to do it"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 169,
  "fields": {
    "question": 198,
    "item": "Stack",
    "match": "Used for Last-In-First-Out operations"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 170,
  "fields": {
    "question": 198,
    "item": "Queue",
    "match": "Used for First-In-First-Out operations"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 171,
  "fields": {
    "question": 198,
    "item": "Hash Table",
    "match": "Used for fast data retrieval using keys"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 172,
  "fields": {
    "question": 198,
    "item": "Graph",
    "match": "Used to represent relationships between entities"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 173,
  "fields": {
    "question": 199,
    "item": "Encapsulation",
    "match": "Restricts access to certain parts of an object"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 174,
  "fields": {
    "question": 199,
    "item": "Inheritance",
    "match": "Allows a class to derive properties from another"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 175,
  "fields": {
    "question": 199,
    "item": "Polymorphism",
    "match": "Enables methods to behave differently based on the object"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 176,
  "fields": {
    "question": 199,
    "item": "Abstraction",
    "match": "Hides implementation details"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 177,
  "fields": {
    "question": 200,
    "item": "Syntax Error",
    "match": "Occurs when code violates the grammar rules of the language"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 178,
  "fields": {
    "question": 200,
    "item": "Runtime Error",
    "match": "Occurs during program execution"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 179,
  "fields": {
    "question": 200,
    "item": "Logic Error",
    "match": "Produces incorrect results but no error message"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 180,
  "fields": {
    "question": 200,
    "item": "Type Error",
    "match": "Occurs when an operation is applied to an inappropriate type"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 181,
  "fields": {
    "question": 201,
    "item": "Sorting",
    "match": "Quick Sort"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 182,
  "fields": {
    "question": 201,
    "item": "Searching",
    "match": "Binary Search"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 183,
  "fields": {
    "question": 201,
    "item": "Graph Traversal",
    "match": "Depth-First Search"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 184,
  "fields": {
    "question": 201,
    "item": "Dynamic Programming",
    "match": "Fibonacci Sequence Calculation"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 185,
  "fields": {
    "question": 202,
    "item": "GET",
    "match": "Retrieves data from a server"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 186,
  "fields": {
    "question": 202,
    "item": "POST",
    "match": "Submits data to be processed"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 187,
  "fields": {
    "question": 202,
    "item": "PUT",
    "match": "Updates or replaces a resource"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 188,
  "fields": {
    "question": 202,
    "item": "DELETE",
    "match": "Removes a resource"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 189,
  "fields": {
    "question": 203,
    "item": "JSON",
    "match": "Used for data interchange in web applications"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 190,
  "fields": {
    "question": 203,
    "item": "XML",
    "match": "Used for structured data representation"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 191,
  "fields": {
    "question": 203,
    "item": "CSV",
    "match": "Used for storing tabular data"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 192,
  "fields": {
    "question": 203,
    "item": "YAML",
    "match": "Used for configuration files"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 193,
  "fields": {
    "question": 204,
    "item": "Singleton",
    "match": "Ensures a class has only one instance"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 194,
  "fields": {
    "question": 204,
    "item": "Observer",
    "match": "Allows objects to subscribe to events"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 195,
  "fields": {
    "question": 204,
    "item": "Factory",
    "match": "Creates objects without specifying their concrete type"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 196,
  "fields": {
    "question": 204,
    "item": "Decorator",
    "match": "Adds behavior to an object dynamically"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 197,
  "fields": {
    "question": 205,
    "item": "DRY",
    "match": "Don't Repeat Yourself"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 198,
  "fields": {
    "question": 205,
    "item": "KISS",
    "match": "Keep It Simple, Stupid"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 199,
  "fields": {
    "question": 205,
    "item": "YAGNI",
    "match": "You Aren't Gonna Need It"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 200,
  "fields": {
    "question": 205,
    "item": "SOLID",
    "match": "Set of principles for object-oriented design"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 201,
  "fields": {
    "question": 206,
    "item": "CPU",
    "match": "Central Processing Unit"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 202,
  "fields": {
    "question": 206,
    "item": "RAM",
    "match": "Random Access Memory"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 203,
  "fields": {
    "question": 206,
    "item": "SSD",
    "match": "Solid State Drive"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 204,
  "fields": {
    "question": 206,
    "item": "GPU",
    "match": "Graphics Processing Unit"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 205,
  "fields": {
    "question": 207,
    "item": "HTTP",
    "match": "Used for transferring web pages"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 206,
  "fields": {
    "question": 207,
    "item": "FTP",
    "match": "Used for transferring files"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 207,
  "fields": {
    "question": 207,
    "item": "DNS",
    "match": "Resolves domain names to IP addresses"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 208,
  "fields": {
    "question": 207,
    "item": "SMTP",
    "match": "Used for sending emails"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 209,
  "fields": {
    "question": 208,
    "item": "LAN",
    "match": "Local Area Network"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 210,
  "fields": {
    "question": 208,
    "item": "WAN",
    "match": "Wide Area Network"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 211,
  "fields": {
    "question": 208,
    "item": "IP",
    "match": "Internet Protocol"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 212,
  "fields": {
    "question": 208,
    "item": "URL",
    "match": "Uniform Resource Locator"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 213,
  "fields": {
    "question": 209,
    "item": "Ctrl + C",
    "match": "Copy"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 214,
  "fields": {
    "question": 209,
    "item": "Ctrl + V",
    "match": "Paste"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 215,
  "fields": {
    "question": 209,
    "item": "Ctrl + X",
    "match": "Cut"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 216,
  "fields": {
    "question": 209,
    "item": "Ctrl + Z",
    "match": "Undo"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 217,
  "fields": {
    "question": 210,
    "item": "Android",
    "match": "Google"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 218,
  "fields": {
    "question": 210,
    "item": "iOS",
    "match": "Apple"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 219,
  "fields": {
    "question": 210,
    "item": "Windows",
    "match": "Microsoft"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 220,
  "fields": {
    "question": 210,
    "item": "Linux",
    "match": "Linus Torvalds"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 221,
  "fields": {
    "question": 281,
    "item": "200",
    "match": "OK - Successful request"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 222,
  "fields": {
    "question": 281,
    "item": "404",
    "match": "Not Found - Resource does not exist"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 223,
  "fields": {
    "question": 281,
    "item": "403",
    "match": "Forbidden - Access denied"
  }
},
{
  "model": "questions.matchingpair",
  "pk": 224,
  "fields": {
    "question": 281,
    "item": "500",
    "match": "Internal Server Error"
  }
},
{
  "model": "questions.orderingitem",
  "pk": 1,
  "fields": {
    "question": 212,
    "text": "Write the code",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 2,
  "fields": {
    "question": 212,
    "text": "Save the file",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 3,
  "fields": {
    "question": 212,
    "text": "Run the program",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 4,
  "fields": {
    "question": 212,
    "text": "Check the output",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 5,
  "fields": {
    "question": 213,
    "text": "Requirement Analysis",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 6,
  "fields": {
    "question": 213,
    "text": "Design",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 7,
  "fields": {
    "question": 213,
    "text": "Implementation",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 8,
  "fields": {
    "question": 213,
    "text": "Testing",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 9,
  "fields": {
    "question": 213,
    "text": "Deployment",
    "order": 5
  }
},
{
  "model": "questions.orderingitem",
  "pk": 10,
  "fields": {
    "question": 214,
    "text": "Write the Java code",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 11,
  "fields": {
    "question": 214,
    "text": "Save the file with .java extension",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 12,
  "fields": {
    "question": 214,
    "text": "Compile the code using javac",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 13,
  "fields": {
    "question": 214,
    "text": "Run the compiled program using java command",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 14,
  "fields": {
    "question": 215,
    "text": "Identify the issue",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 15,
  "fields": {
    "question": 215,
    "text": "Reproduce the issue",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 16,
  "fields": {
    "question": 215,
    "text": "Use debugging tools or print statements",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 17,
  "fields": {
    "question": 215,
    "text": "Fix the issue",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 18,
  "fields": {
    "question": 215,
    "text": "Test the program after the fix",
    "order": 5
  }
},
{
  "model": "questions.orderingitem",
  "pk": 19,
  "fields": {
    "question": 216,
    "text": "Install Git on your system",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 20,
  "fields": {
    "question": 216,
    "text": "Navigate to the project directory",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 21,
  "fields": {
    "question": 216,
    "text": "Initialize a new Git repository",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 22,
  "fields": {
    "question": 216,
    "text": "Add files to the repository",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 23,
  "fields": {
    "question": 216,
    "text": "Commit the changes",
    "order": 5
  }
},
{
  "model": "questions.orderingitem",
  "pk": 24,
  "fields": {
    "question": 217,
    "text": "Write the Python code",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 25,
  "fields": {
    "question": 217,
    "text": "Save the file with .py extension",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 26,
  "fields": {
    "question": 217,
    "text": "Open a terminal or command prompt",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 27,
  "fields": {
    "question": 217,
    "text": "Run the script using the python command",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 28,
  "fields": {
    "question": 218,
    "text": "Gather requirements",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 29,
  "fields": {
    "question": 218,
    "text": "Create design specifications",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 30,
  "fields": {
    "question": 218,
    "text": "Develop the application",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 31,
  "fields": {
    "question": 218,
    "text": "Test the application",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 32,
  "fields": {
    "question": 218,
    "text": "Deploy the application",
    "order": 5
  }
},
{
  "model": "questions.orderingitem",
  "pk": 33,
  "fields": {
    "question": 219,
    "text": "Define the problem",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 34,
  "fields": {
    "question": 219,
    "text": "Identify objects and classes",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 35,
  "fields": {
    "question": 219,
    "text": "Establish relationships between classes",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 36,
  "fields": {
    "question": 219,
    "text": "Implement methods and attributes",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 37,
  "fields": {
    "question": 219,
    "text": "Test the system",
    "order": 5
  }
},
{
  "model": "questions.orderingitem",
  "pk": 38,
  "fields": {
    "question": 220,
    "text": "Open the database connection",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 39,
  "fields": {
    "question": 220,
    "text": "Write the SQL query",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 40,
  "fields": {
    "question": 220,
    "text": "Execute the query",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 41,
  "fields": {
    "question": 220,
    "text": "Retrieve the results",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 42,
  "fields": {
    "question": 220,
    "text": "Close the database connection",
    "order": 5
  }
},
{
  "model": "questions.orderingitem",
  "pk": 43,
  "fields": {
    "question": 221,
    "text": "Define the endpoints",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 44,
  "fields": {
    "question": 221,
    "text": "Set up the server",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 45,
  "fields": {
    "question": 221,
    "text": "Implement the API logic",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 46,
  "fields": {
    "question": 221,
    "text": "Test the API",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 47,
  "fields": {
    "question": 221,
    "text": "Document the API",
    "order": 5
  }
},
{
  "model": "questions.orderingitem",
  "pk": 48,
  "fields": {
    "question": 222,
    "text": "Open a terminal or command prompt",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 49,
  "fields": {
    "question": 222,
    "text": "Use pip to install the package",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 50,
  "fields": {
    "question": 222,
    "text": "Import the package in your Python script",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 51,
  "fields": {
    "question": 222,
    "text": "Use the package in your code",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 52,
  "fields": {
    "question": 223,
    "text": "Pull the latest changes from the remote repository",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 53,
  "fields": {
    "question": 223,
    "text": "Attempt to merge the branches",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 54,
  "fields": {
    "question": 223,
    "text": "Identify the conflict in the files",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 55,
  "fields": {
    "question": 223,
    "text": "Resolve the conflict manually",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 56,
  "fields": {
    "question": 223,
    "text": "Commit the resolved changes",
    "order": 5
  }
},
{
  "model": "questions.orderingitem",
  "pk": 57,
  "fields": {
    "question": 224,
    "text": "Open the database",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 58,
  "fields": {
    "question": 224,
    "text": "Write the CREATE TABLE query",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 59,
  "fields": {
    "question": 224,
    "text": "Execute the query",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 60,
  "fields": {
    "question": 224,
    "text": "Verify the table",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 61,
  "fields": {
    "question": 225,
    "text": "Connect to the database",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 62,
  "fields": {
    "question": 225,
    "text": "Write the SELECT query",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 63,
  "fields": {
    "question": 225,
    "text": "Execute the query",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 64,
  "fields": {
    "question": 225,
    "text": "Retrieve the results",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 65,
  "fields": {
    "question": 226,
    "text": "Open the SQL client or database management tool",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 66,
  "fields": {
    "question": 226,
    "text": "Write the CREATE DATABASE statement",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 67,
  "fields": {
    "question": 226,
    "text": "Execute the statement",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 68,
  "fields": {
    "question": 226,
    "text": "Verify the creation of the database",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 69,
  "fields": {
    "question": 227,
    "text": "Connect to the database",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 70,
  "fields": {
    "question": 227,
    "text": "Write the SELECT query with conditions",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 71,
  "fields": {
    "question": 227,
    "text": "Execute the query",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 72,
  "fields": {
    "question": 227,
    "text": "Retrieve and analyze the results",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 73,
  "fields": {
    "question": 228,
    "text": "Identify the target table",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 74,
  "fields": {
    "question": 228,
    "text": "Write the INSERT INTO statement with values",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 75,
  "fields": {
    "question": 228,
    "text": "Execute the statement",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 76,
  "fields": {
    "question": 228,
    "text": "Verify the data in the table",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 77,
  "fields": {
    "question": 229,
    "text": "Identify the records to update",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 78,
  "fields": {
    "question": 229,
    "text": "Write the UPDATE statement with conditions",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 79,
  "fields": {
    "question": 229,
    "text": "Execute the statement",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 80,
  "fields": {
    "question": 229,
    "text": "Verify the updated records",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 81,
  "fields": {
    "question": 230,
    "text": "Identify the records to delete",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 82,
  "fields": {
    "question": 230,
    "text": "Write the DELETE FROM statement with conditions",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 83,
  "fields": {
    "question": 230,
    "text": "Execute the statement",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 84,
  "fields": {
    "question": 230,
    "text": "Verify the deletion of records",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 85,
  "fields": {
    "question": 231,
    "text": "Write the CREATE TABLE statement",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 86,
  "fields": {
    "question": 231,
    "text": "Define columns and their data types",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 87,
  "fields": {
    "question": 231,
    "text": "Execute the statement",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 88,
  "fields": {
    "question": 231,
    "text": "Verify the table creation",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 89,
  "fields": {
    "question": 232,
    "text": "Identify the table and columns for the index",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 90,
  "fields": {
    "question": 232,
    "text": "Write the CREATE INDEX statement",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 91,
  "fields": {
    "question": 232,
    "text": "Execute the statement",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 92,
  "fields": {
    "question": 232,
    "text": "Verify the creation of the index",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 93,
  "fields": {
    "question": 233,
    "text": "Open the database management tool",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 94,
  "fields": {
    "question": 233,
    "text": "Select the database to back up",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 95,
  "fields": {
    "question": 233,
    "text": "Choose the backup options (e.g., full or incremental)",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 96,
  "fields": {
    "question": 233,
    "text": "Execute the backup process",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 97,
  "fields": {
    "question": 233,
    "text": "Save the backup file in a secure location",
    "order": 5
  }
},
{
  "model": "questions.orderingitem",
  "pk": 98,
  "fields": {
    "question": 234,
    "text": "Locate the backup file",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 99,
  "fields": {
    "question": 234,
    "text": "Open the database management tool",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 100,
  "fields": {
    "question": 234,
    "text": "Write or select the RESTORE DATABASE statement",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 101,
  "fields": {
    "question": 234,
    "text": "Execute the restore process",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 102,
  "fields": {
    "question": 234,
    "text": "Verify the restored data",
    "order": 5
  }
},
{
  "model": "questions.orderingitem",
  "pk": 103,
  "fields": {
    "question": 235,
    "text": "Identify the tables to join",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 104,
  "fields": {
    "question": 235,
    "text": "Write the JOIN clause in the query",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 105,
  "fields": {
    "question": 235,
    "text": "Specify the ON condition for the join",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 106,
  "fields": {
    "question": 235,
    "text": "Execute the query",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 107,
  "fields": {
    "question": 235,
    "text": "Analyze the joined results",
    "order": 5
  }
},
{
  "model": "questions.orderingitem",
  "pk": 108,
  "fields": {
    "question": 236,
    "text": "Install Django",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 109,
  "fields": {
    "question": 236,
    "text": "Run django-admin startproject",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 110,
  "fields": {
    "question": 236,
    "text": "Define the app structure",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 111,
  "fields": {
    "question": 236,
    "text": "Write the views and URLs",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 112,
  "fields": {
    "question": 237,
    "text": "User sends a request",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 113,
  "fields": {
    "question": 237,
    "text": "Django processes the middleware",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 114,
  "fields": {
    "question": 237,
    "text": "View returns a response",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 115,
  "fields": {
    "question": 237,
    "text": "Response is sent to the user",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 116,
  "fields": {
    "question": 238,
    "text": "Install Django using pip",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 117,
  "fields": {
    "question": 238,
    "text": "Run 'django-admin startproject project_name'",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 118,
  "fields": {
    "question": 238,
    "text": "Navigate to the project directory",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 119,
  "fields": {
    "question": 238,
    "text": "Run the server using 'python manage.py runserver'",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 120,
  "fields": {
    "question": 239,
    "text": "Navigate to the Django project directory",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 121,
  "fields": {
    "question": 239,
    "text": "Run 'python manage.py startapp app_name'",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 122,
  "fields": {
    "question": 239,
    "text": "Add the app to INSTALLED_APPS in settings.py",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 123,
  "fields": {
    "question": 239,
    "text": "Define models, views, and URLs for the app",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 124,
  "fields": {
    "question": 240,
    "text": "Define the model in models.py",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 125,
  "fields": {
    "question": 240,
    "text": "Run 'python manage.py makemigrations'",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 126,
  "fields": {
    "question": 240,
    "text": "Run 'python manage.py migrate'",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 127,
  "fields": {
    "question": 240,
    "text": "Verify the model in the database",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 128,
  "fields": {
    "question": 241,
    "text": "Create a superuser using 'python manage.py createsuperuser'",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 129,
  "fields": {
    "question": 241,
    "text": "Register the models in admin.py",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 130,
  "fields": {
    "question": 241,
    "text": "Run the server using 'python manage.py runserver'",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 131,
  "fields": {
    "question": 241,
    "text": "Access the admin interface at /admin",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 132,
  "fields": {
    "question": 242,
    "text": "Create a form class in forms.py",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 133,
  "fields": {
    "question": 242,
    "text": "Define the form fields and validation logic",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 134,
  "fields": {
    "question": 242,
    "text": "Render the form in a template",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 135,
  "fields": {
    "question": 242,
    "text": "Handle the form submission in a view",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 136,
  "fields": {
    "question": 243,
    "text": "Create a directory for static files",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 137,
  "fields": {
    "question": 243,
    "text": "Add 'django.contrib.staticfiles' to INSTALLED_APPS",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 138,
  "fields": {
    "question": 243,
    "text": "Set STATIC_URL and STATICFILES_DIRS in settings.py",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 139,
  "fields": {
    "question": 243,
    "text": "Use the {% static %} template tag to include static files",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 140,
  "fields": {
    "question": 244,
    "text": "Import required modules in views.py",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 141,
  "fields": {
    "question": 244,
    "text": "Define a view function or class",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 142,
  "fields": {
    "question": 244,
    "text": "Process the request and return a response",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 143,
  "fields": {
    "question": 244,
    "text": "Map the view to a URL in urls.py",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 144,
  "fields": {
    "question": 245,
    "text": "Create a directory for templates",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 145,
  "fields": {
    "question": 245,
    "text": "Create an HTML file inside the templates directory",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 146,
  "fields": {
    "question": 245,
    "text": "Render the template in a view using render()",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 147,
  "fields": {
    "question": 245,
    "text": "Use template tags and variables in the HTML",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 148,
  "fields": {
    "question": 246,
    "text": "Create a middleware class in middleware.py",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 149,
  "fields": {
    "question": 246,
    "text": "Define the process_request or process_response methods",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 150,
  "fields": {
    "question": 246,
    "text": "Add the middleware class to MIDDLEWARE in settings.py",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 151,
  "fields": {
    "question": 246,
    "text": "Test the middleware by running the server",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 152,
  "fields": {
    "question": 247,
    "text": "Install the required database driver",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 153,
  "fields": {
    "question": 247,
    "text": "Update the DATABASES setting in settings.py",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 154,
  "fields": {
    "question": 247,
    "text": "Run 'python manage.py makemigrations'",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 155,
  "fields": {
    "question": 247,
    "text": "Run 'python manage.py migrate'",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 156,
  "fields": {
    "question": 248,
    "text": "Install Postgres",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 157,
  "fields": {
    "question": 248,
    "text": "Start the Postgres server",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 158,
  "fields": {
    "question": 248,
    "text": "Create a new database",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 159,
  "fields": {
    "question": 248,
    "text": "Connect to the database",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 160,
  "fields": {
    "question": 249,
    "text": "Open the terminal",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 161,
  "fields": {
    "question": 249,
    "text": "Run the pg_dump command",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 162,
  "fields": {
    "question": 249,
    "text": "Verify the backup file",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 163,
  "fields": {
    "question": 249,
    "text": "Store the backup in a safe location",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 164,
  "fields": {
    "question": 250,
    "text": "Download the installer from the official website",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 165,
  "fields": {
    "question": 250,
    "text": "Run the installer and follow the instructions",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 166,
  "fields": {
    "question": 250,
    "text": "Set up a PostgreSQL user and password",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 167,
  "fields": {
    "question": 250,
    "text": "Verify the installation by running 'psql --version'",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 168,
  "fields": {
    "question": 251,
    "text": "Log in to PostgreSQL using 'psql' or PgAdmin",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 169,
  "fields": {
    "question": 251,
    "text": "Run the 'CREATE DATABASE database_name;' command",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 170,
  "fields": {
    "question": 251,
    "text": "Verify the database creation using '\\l'",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 171,
  "fields": {
    "question": 251,
    "text": "Connect to the database using '\\c database_name'",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 172,
  "fields": {
    "question": 252,
    "text": "Log in to PostgreSQL as a superuser",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 173,
  "fields": {
    "question": 252,
    "text": "Run 'CREATE USER username WITH PASSWORD 'password';'",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 174,
  "fields": {
    "question": 252,
    "text": "Grant necessary privileges using 'GRANT' statement",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 175,
  "fields": {
    "question": 252,
    "text": "Verify the user creation using '\\du'",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 176,
  "fields": {
    "question": 253,
    "text": "Log in to the terminal or use pgAdmin",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 177,
  "fields": {
    "question": 253,
    "text": "Run 'pg_dump database_name > backup_file.sql'",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 178,
  "fields": {
    "question": 253,
    "text": "Verify the backup file exists",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 179,
  "fields": {
    "question": 253,
    "text": "Store the backup file in a secure location",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 180,
  "fields": {
    "question": 254,
    "text": "Log in to the terminal or use pgAdmin",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 181,
  "fields": {
    "question": 254,
    "text": "Run 'psql database_name < backup_file.sql'",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 182,
  "fields": {
    "question": 254,
    "text": "Verify the restoration by checking the database",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 183,
  "fields": {
    "question": 254,
    "text": "Ensure that the data is restored successfully",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 184,
  "fields": {
    "question": 255,
    "text": "Install the psycopg2 library using pip",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 185,
  "fields": {
    "question": 255,
    "text": "Import the psycopg2 library in the Python script",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 186,
  "fields": {
    "question": 255,
    "text": "Use 'psycopg2.connect()' to establish the connection",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 187,
  "fields": {
    "question": 255,
    "text": "Use the connection to execute SQL queries",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 188,
  "fields": {
    "question": 256,
    "text": "Log in to PostgreSQL",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 189,
  "fields": {
    "question": 256,
    "text": "Write the 'CREATE TABLE' statement with columns and data types",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 190,
  "fields": {
    "question": 256,
    "text": "Execute the query",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 191,
  "fields": {
    "question": 256,
    "text": "Verify the table creation using '\\dt'",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 192,
  "fields": {
    "question": 257,
    "text": "Write the 'INSERT INTO' statement with values",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 193,
  "fields": {
    "question": 257,
    "text": "Execute the query",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 194,
  "fields": {
    "question": 257,
    "text": "Verify the data insertion using 'SELECT * FROM table_name;'",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 195,
  "fields": {
    "question": 257,
    "text": "Commit the transaction if necessary",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 196,
  "fields": {
    "question": 258,
    "text": "Write the 'CREATE INDEX' statement with the target columns",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 197,
  "fields": {
    "question": 258,
    "text": "Execute the query",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 198,
  "fields": {
    "question": 258,
    "text": "Verify the index creation using '\\di'",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 199,
  "fields": {
    "question": 258,
    "text": "Use the index to optimize query performance",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 200,
  "fields": {
    "question": 259,
    "text": "Identify the tables to join",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 201,
  "fields": {
    "question": 259,
    "text": "Write the SELECT statement with the JOIN clause",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 202,
  "fields": {
    "question": 259,
    "text": "Specify the ON condition for the join",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 203,
  "fields": {
    "question": 259,
    "text": "Execute the query and retrieve the results",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 204,
  "fields": {
    "question": 260,
    "text": "Install Node.js",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 205,
  "fields": {
    "question": 260,
    "text": "Initialize the project using npm",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 206,
  "fields": {
    "question": 260,
    "text": "Create the server file",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 207,
  "fields": {
    "question": 260,
    "text": "Run the server",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 208,
  "fields": {
    "question": 261,
    "text": "User sends a request",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 209,
  "fields": {
    "question": 261,
    "text": "Route matches the request",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 210,
  "fields": {
    "question": 261,
    "text": "Controller processes the request",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 211,
  "fields": {
    "question": 261,
    "text": "Response is sent back to the user",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 212,
  "fields": {
    "question": 262,
    "text": "Download the Node.js installer from the official website",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 213,
  "fields": {
    "question": 262,
    "text": "Run the installer and follow the instructions",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 214,
  "fields": {
    "question": 262,
    "text": "Verify the installation using 'node --version' and 'npm --version'",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 215,
  "fields": {
    "question": 262,
    "text": "Install additional tools if necessary (e.g., npm packages)",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 216,
  "fields": {
    "question": 263,
    "text": "Navigate to the project folder in the terminal",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 217,
  "fields": {
    "question": 263,
    "text": "Run 'npm init' to create a package.json file",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 218,
  "fields": {
    "question": 263,
    "text": "Install necessary dependencies using 'npm install package_name'",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 219,
  "fields": {
    "question": 263,
    "text": "Create the main JavaScript file (e.g., app.js)",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 220,
  "fields": {
    "question": 264,
    "text": "Require the 'http' module in your script",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 221,
  "fields": {
    "question": 264,
    "text": "Create a server using 'http.createServer()'",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 222,
  "fields": {
    "question": 264,
    "text": "Define a callback function to handle requests and responses",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 223,
  "fields": {
    "question": 264,
    "text": "Call 'server.listen()' to start the server on a port",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 224,
  "fields": {
    "question": 265,
    "text": "Require the 'http' and 'url' modules in your script",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 225,
  "fields": {
    "question": 265,
    "text": "Parse the incoming request using 'req.on('data', ...)'",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 226,
  "fields": {
    "question": 265,
    "text": "Define a POST request handler in the server",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 227,
  "fields": {
    "question": 265,
    "text": "Respond to the client with the appropriate data",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 228,
  "fields": {
    "question": 266,
    "text": "Run 'npm install express' to install the Express module",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 229,
  "fields": {
    "question": 266,
    "text": "Require the 'express' module in your script",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 230,
  "fields": {
    "question": 266,
    "text": "Create an Express app using 'express()'",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 231,
  "fields": {
    "question": 266,
    "text": "Set up routes using 'app.get()', 'app.post()', etc.",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 232,
  "fields": {
    "question": 267,
    "text": "Install the 'mongoose' package using 'npm install mongoose'",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 233,
  "fields": {
    "question": 267,
    "text": "Require 'mongoose' in your script",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 234,
  "fields": {
    "question": 267,
    "text": "Use 'mongoose.connect()' to connect to the database",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 235,
  "fields": {
    "question": 267,
    "text": "Define schemas and models for your data",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 236,
  "fields": {
    "question": 268,
    "text": "Require the 'fs' module in your script",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 237,
  "fields": {
    "question": 268,
    "text": "Use 'fs.readFile()' or 'fs.readFileSync()' to read the file",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 238,
  "fields": {
    "question": 268,
    "text": "Provide a callback function to handle the file content",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 239,
  "fields": {
    "question": 268,
    "text": "Process the file data as needed",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 240,
  "fields": {
    "question": 269,
    "text": "Create a function that takes 'req', 'res', and 'next' as parameters",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 241,
  "fields": {
    "question": 269,
    "text": "Use 'app.use()' to define the middleware",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 242,
  "fields": {
    "question": 269,
    "text": "Include the middleware in the application",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 243,
  "fields": {
    "question": 269,
    "text": "Implement the desired functionality (e.g., logging, authentication)",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 244,
  "fields": {
    "question": 270,
    "text": "Prepare the app for production (minify, optimize)",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 245,
  "fields": {
    "question": 270,
    "text": "Choose a deployment platform (e.g., Heroku, AWS, DigitalOcean)",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 246,
  "fields": {
    "question": 270,
    "text": "Push your code to the platform's repository",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 247,
  "fields": {
    "question": 270,
    "text": "Set up the environment variables and run the app on the platform",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 248,
  "fields": {
    "question": 271,
    "text": "Set breakpoints in your code using 'debugger'",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 249,
  "fields": {
    "question": 271,
    "text": "Run the application in debug mode with 'node --inspect app.js'",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 250,
  "fields": {
    "question": 271,
    "text": "Open the Chrome DevTools and connect to the debugger",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 251,
  "fields": {
    "question": 271,
    "text": "Analyze the code execution and debug any issues",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 252,
  "fields": {
    "question": 272,
    "text": "Power on the computer",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 253,
  "fields": {
    "question": 272,
    "text": "Log in with credentials",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 254,
  "fields": {
    "question": 272,
    "text": "Open the desired application",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 255,
  "fields": {
    "question": 272,
    "text": "Perform the required task",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 256,
  "fields": {
    "question": 273,
    "text": "Identify the problem",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 257,
  "fields": {
    "question": 273,
    "text": "Analyze possible causes",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 258,
  "fields": {
    "question": 273,
    "text": "Apply a solution",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 259,
  "fields": {
    "question": 273,
    "text": "Test the system",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 260,
  "fields": {
    "question": 274,
    "text": "Check the server's power and network connections",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 261,
  "fields": {
    "question": 274,
    "text": "Examine the server's error logs for clues",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 262,
  "fields": {
    "question": 274,
    "text": "Restart the server to rule out temporary issues",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 263,
  "fields": {
    "question": 274,
    "text": "Test the server's responsiveness and check for known issues",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 264,
  "fields": {
    "question": 275,
    "text": "Define the purpose and key points of the presentation",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 265,
  "fields": {
    "question": 275,
    "text": "Create visual aids such as slides or handouts",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 266,
  "fields": {
    "question": 275,
    "text": "Rehearse the presentation",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 267,
  "fields": {
    "question": 275,
    "text": "Present and engage with the audience",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 268,
  "fields": {
    "question": 276,
    "text": "Create or update your resume and cover letter",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 269,
  "fields": {
    "question": 276,
    "text": "Search for job opportunities on various platforms",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 270,
  "fields": {
    "question": 276,
    "text": "Submit your application with the necessary documents",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 271,
  "fields": {
    "question": 276,
    "text": "Prepare for an interview if selected",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 272,
  "fields": {
    "question": 277,
    "text": "Gather all the ingredients needed for the recipe",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 273,
  "fields": {
    "question": 277,
    "text": "Prepare the ingredients (chop, marinate, etc.)",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 274,
  "fields": {
    "question": 277,
    "text": "Cook the meal according to the recipe",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 275,
  "fields": {
    "question": 277,
    "text": "Serve and enjoy the meal",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 276,
  "fields": {
    "question": 278,
    "text": "Unbox and connect the monitor, keyboard, and mouse",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 277,
  "fields": {
    "question": 278,
    "text": "Turn on the computer and set up the operating system",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 278,
  "fields": {
    "question": 278,
    "text": "Install necessary software and updates",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 279,
  "fields": {
    "question": 278,
    "text": "Set up accounts and personalize the system settings",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 280,
  "fields": {
    "question": 280,
    "text": "Connect to the database",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 281,
  "fields": {
    "question": 280,
    "text": "Write the SELECT query",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 282,
  "fields": {
    "question": 280,
    "text": "Execute the query",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 283,
  "fields": {
    "question": 280,
    "text": "Retrieve the results",
    "order": 4
  }
},
{
  "model": "questions.orderingitem",
  "pk": 284,
  "fields": {
    "question": 284,
    "text": "Connect to the database",
    "order": 1
  }
},
{
  "model": "questions.orderingitem",
  "pk": 285,
  "fields": {
    "question": 284,
    "text": "Write the SELECT query",
    "order": 2
  }
},
{
  "model": "questions.orderingitem",
  "pk": 286,
  "fields": {
    "question": 284,
    "text": "Execute the query",
    "order": 3
  }
},
{
  "model": "questions.orderingitem",
  "pk": 287,
  "fields": {
    "question": 284,
    "text": "Retrieve the results",
    "order": 4
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can add log entry",
    "content_type": [
      "admin",
      "logentry"
    ],
    "codename": "add_logentry"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can change log entry",
    "content_type": [
      "admin",
      "logentry"
    ],
    "codename": "change_logentry"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can delete log entry",
    "content_type": [
      "admin",
      "logentry"
    ],
    "codename": "delete_logentry"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can view log entry",
    "content_type": [
      "admin",
      "logentry"
    ],
    "codename": "view_logentry"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can add permission",
    "content_type": [
      "auth",
      "permission"
    ],
    "codename": "add_permission"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can change permission",
    "content_type": [
      "auth",
      "permission"
    ],
    "codename": "change_permission"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can delete permission",
    "content_type": [
      "auth",
      "permission"
    ],
    "codename": "delete_permission"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can view permission",
    "content_type": [
      "auth",
      "permission"
    ],
    "codename": "view_permission"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can add group",
    "content_type": [
      "auth",
      "group"
    ],
    "codename": "add_group"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can change group",
    "content_type": [
      "auth",
      "group"
    ],
    "codename": "change_group"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can delete group",
    "content_type": [
      "auth",
      "group"
    ],
    "codename": "delete_group"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can view group",
    "content_type": [
      "auth",
      "group"
    ],
    "codename": "view_group"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can add content type",
    "content_type": [
      "contenttypes",
      "contenttype"
    ],
    "codename": "add_contenttype"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can change content type",
    "content_type": [
      "contenttypes",
      "contenttype"
    ],
    "codename": "change_contenttype"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can delete content type",
    "content_type": [
      "contenttypes",
      "contenttype"
    ],
    "codename": "delete_contenttype"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can view content type",
    "content_type": [
      "contenttypes",
      "contenttype"
    ],
    "codename": "view_contenttype"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can add session",
    "content_type": [
      "sessions",
      "session"
    ],
    "codename": "add_session"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can change session",
    "content_type": [
      "sessions",
      "session"
    ],
    "codename": "change_session"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can delete session",
    "content_type": [
      "sessions",
      "session"
    ],
    "codename": "delete_session"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can view session",
    "content_type": [
      "sessions",
      "session"
    ],
    "codename": "view_session"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can add Token",
    "content_type": [
      "authtoken",
      "token"
    ],
    "codename": "add_token"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can change Token",
    "content_type": [
      "authtoken",
      "token"
    ],
    "codename": "change_token"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can delete Token",
    "content_type": [
      "authtoken",
      "token"
    ],
    "codename": "delete_token"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can view Token",
    "content_type": [
      "authtoken",
      "token"
    ],
    "codename": "view_token"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can add Token",
    "content_type": [
      "authtoken",
      "tokenproxy"
    ],
    "codename": "add_tokenproxy"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can change Token",
    "content_type": [
      "authtoken",
      "tokenproxy"
    ],
    "codename": "change_tokenproxy"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can delete Token",
    "content_type": [
      "authtoken",
      "tokenproxy"
    ],
    "codename": "delete_tokenproxy"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can view Token",
    "content_type": [
      "authtoken",
      "tokenproxy"
    ],
    "codename": "view_tokenproxy"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can add quiz",
    "content_type": [
      "quizzes",
      "quiz"
    ],
    "codename": "add_quiz"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can change quiz",
    "content_type": [
      "quizzes",
      "quiz"
    ],
    "codename": "change_quiz"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can delete quiz",
    "content_type": [
      "quizzes",
      "quiz"
    ],
    "codename": "delete_quiz"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can view quiz",
    "content_type": [
      "quizzes",
      "quiz"
    ],
    "codename": "view_quiz"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can add user",
    "content_type": [
      "users",
      "usercustom"
    ],
    "codename": "add_usercustom"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can change user",
    "content_type": [
      "users",
      "usercustom"
    ],
    "codename": "change_usercustom"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can delete user",
    "content_type": [
      "users",
      "usercustom"
    ],
    "codename": "delete_usercustom"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can view user",
    "content_type": [
      "users",
      "usercustom"
    ],
    "codename": "view_usercustom"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can add category",
    "content_type": [
      "categories",
      "category"
    ],
    "codename": "add_category"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can change category",
    "content_type": [
      "categories",
      "category"
    ],
    "codename": "change_category"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can delete category",
    "content_type": [
      "categories",
      "category"
    ],
    "codename": "delete_category"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can view category",
    "content_type": [
      "categories",
      "category"
    ],
    "codename": "view_category"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can add matching pair",
    "content_type": [
      "questions",
      "matchingpair"
    ],
    "codename": "add_matchingpair"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can change matching pair",
    "content_type": [
      "questions",
      "matchingpair"
    ],
    "codename": "change_matchingpair"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can delete matching pair",
    "content_type": [
      "questions",
      "matchingpair"
    ],
    "codename": "delete_matchingpair"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can view matching pair",
    "content_type": [
      "questions",
      "matchingpair"
    ],
    "codename": "view_matchingpair"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can add mcq",
    "content_type": [
      "questions",
      "mcq"
    ],
    "codename": "add_mcq"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can change mcq",
    "content_type": [
      "questions",
      "mcq"
    ],
    "codename": "change_mcq"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can delete mcq",
    "content_type": [
      "questions",
      "mcq"
    ],
    "codename": "delete_mcq"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can view mcq",
    "content_type": [
      "questions",
      "mcq"
    ],
    "codename": "view_mcq"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can add ordering item",
    "content_type": [
      "questions",
      "orderingitem"
    ],
    "codename": "add_orderingitem"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can change ordering item",
    "content_type": [
      "questions",
      "orderingitem"
    ],
    "codename": "change_orderingitem"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can delete ordering item",
    "content_type": [
      "questions",
      "orderingitem"
    ],
    "codename": "delete_orderingitem"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can view ordering item",
    "content_type": [
      "questions",
      "orderingitem"
    ],
    "codename": "view_orderingitem"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can add question",
    "content_type": [
      "questions",
      "question"
    ],
    "codename": "add_question"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can change question",
    "content_type": [
      "questions",
      "question"
    ],
    "codename": "change_question"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can delete question",
    "content_type": [
      "questions",
      "question"
    ],
    "codename": "delete_question"
  }
},
{
  "model": "auth.permission",
  "fields": {
    "name": "Can view question",
    "content_type": [
      "questions",
      "question"
    ],
    "codename": "view_question"
  }
},
{
  "model": "users.usercustom",
  "fields": {
    "password": "pbkdf2_sha256$870000$fNHOuOapDdy6UfWCwgLMTU$K3MwLuo3gt8P3KBpYUrBfXcnERN8rxMJfh21fun5ic8=",
    "last_login": null,
    "is_superuser": false,
    "first_name": "",
    "last_name": "",
    "is_staff": false,
    "is_active": true,
    "date_joined": "2025-01-08T02:30:25.888Z",
    "email": "testuser@example.com",
    "is_creator": true,
    "is_admin": false,
    "username": "Username is not used",
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "users.usercustom",
  "fields": {
    "password": "12345678",
    "last_login": null,
    "is_superuser": false,
    "first_name": "",
    "last_name": "",
    "is_staff": false,
    "is_active": true,
    "date_joined": "2025-01-13T11:23:39.735Z",
    "email": "zeyad@gmail.com",
    "is_creator": false,
    "is_admin": false,
    "username": null,
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "users.usercustom",
  "fields": {
    "password": "pbkdf2_sha256$870000$LgIK19sdYc1hlNsGsmzVog$K/TuyjDtq16URqf9Uyc+QPfZw1PuDHVKQT/ltiFRtaI=",
    "last_login": null,
    "is_superuser": true,
    "first_name": "",
    "last_name": "",
    "is_staff": true,
    "is_active": true,
    "date_joined": "2025-01-13T12:17:07.039Z",
    "email": "z@gmail.com",
    "is_creator": true,
    "is_admin": true,
    "username": null,
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "users.usercustom",
  "fields": {
    "password": "pbkdf2_sha256$870000$uFhQb1JBb5cae52VOVVtoA$k59XSl+Te6XtYL5i1jEAU7yts+UFWgx8oz0fVn6wK+k=",
    "last_login": null,
    "is_superuser": true,
    "first_name": "",
    "last_name": "",
    "is_staff": true,
    "is_active": true,
    "date_joined": "2025-01-13T12:19:22.345Z",
    "email": "zz@gmail.com",
    "is_creator": true,
    "is_admin": true,
    "username": null,
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "users.usercustom",
  "fields": {
    "password": "pbkdf2_sha256$870000$O32IieZQ8FJMylJ4QhiF9O$C8DRgYqwr4YX9WjK5kdSJCwt1XCWtLvPL6vAkoa5QCM=",
    "last_login": null,
    "is_superuser": true,
    "first_name": "",
    "last_name": "",
    "is_staff": true,
    "is_active": true,
    "date_joined": "2025-01-13T12:20:45.681Z",
    "email": "zzz@gmail.com",
    "is_creator": true,
    "is_admin": true,
    "username": null,
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "users.usercustom",
  "fields": {
    "password": "pbkdf2_sha256$870000$U9FiN8QM3rOua9vLXARRsg$gMboCicxVQwvTw51RQqt2VfUg+kDG1So2uVIf9ut1Ao=",
    "last_login": "2025-01-13T12:59:07.694Z",
    "is_superuser": true,
    "first_name": "",
    "last_name": "",
    "is_staff": true,
    "is_active": true,
    "date_joined": "2025-01-13T12:23:51.926Z",
    "email": "zzzz@gmail.com",
    "is_creator": true,
    "is_admin": true,
    "username": null,
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "categories.category",
  "pk": 3,
  "fields": {
    "name": "Code",
    "description": "Questions and tips about coding practices.",
    "slug": "code",
    "user": [
      "testuser@example.com"
    ],
    "created_at": "2025-01-08T02:57:52.626Z",
    "updated_at": "2025-01-08T02:57:52.626Z"
  }
},
{
  "model": "categories.category",
  "pk": 4,
  "fields": {
    "name": "SQL",
    "description": "Structured Query Language and database management.",
    "slug": "sql",
    "user": [
      "testuser@example.com"
    ],
    "created_at": "2025-01-08T02:57:52.629Z",
    "updated_at": "2025-01-08T02:57:52.629Z"
  }
},
{
  "model": "categories.category",
  "pk": 5,
  "fields": {
    "name": "Django",
    "description": "Everything related to Django, the Python web framework.",
    "slug": "django",
    "user": [
      "testuser@example.com"
    ],
    "created_at": "2025-01-08T02:57:52.631Z",
    "updated_at": "2025-01-08T02:57:52.631Z"
  }
},
{
  "model": "categories.category",
  "pk": 6,
  "fields": {
    "name": "Uncategorized",
    "description": "Questions that don't fit into other categories.",
    "slug": "uncategorized",
    "user": [
      "testuser@example.com"
    ],
    "created_at": "2025-01-08T02:57:52.634Z",
    "updated_at": "2025-01-08T02:57:52.634Z"
  }
},
{
  "model": "categories.category",
  "pk": 7,
  "fields": {
    "name": "Postgres",
    "description": "Topics related to PostgreSQL, an advanced relational database system.",
    "slug": "postgres",
    "user": [
      "testuser@example.com"
    ],
    "created_at": "2025-01-08T03:41:22.988Z",
    "updated_at": "2025-01-08T03:41:22.988Z"
  }
},
{
  "model": "categories.category",
  "pk": 8,
  "fields": {
    "name": "NodeJs",
    "description": "Questions and discussions about Node.js, a JavaScript runtime built on Chrome's V8 engine.",
    "slug": "nodejs",
    "user": [
      "testuser@example.com"
    ],
    "created_at": "2025-01-08T03:41:22.992Z",
    "updated_at": "2025-01-08T03:41:22.992Z"
  }
},
{
  "model": "categories.category",
  "pk": 10,
  "fields": {
    "name": "I changed my mind",
    "description": "This is an attempt to test my endpoint.",
    "slug": "i-changed-my-mind",
    "user": [
      "testuser@example.com"
    ],
    "created_at": "2025-01-13T10:23:12.058Z",
    "updated_at": "2025-01-13T10:23:12.058Z"
  }
},
{
  "model": "categories.category",
  "pk": 14,
  "fields": {
    "name": "My brand new category!",
    "description": "This is an attempt to test my endpoint.",
    "slug": "my-brand-new-category-1",
    "user": [
      "testuser@example.com"
    ],
    "created_at": "2025-01-13T10:39:14.699Z",
    "updated_at": "2025-01-13T10:39:14.699Z"
  }
},
{
  "model": "categories.category",
  "pk": 15,
  "fields": {
    "name": "My brand new category!!",
    "description": "This is an attempt to test my endpoint.",
    "slug": "my-brand-new-category-2",
    "user": [
      "testuser@example.com"
    ],
    "created_at": "2025-01-13T10:40:10.274Z",
    "updated_at": "2025-01-13T10:40:10.274Z"
  }
},
{
  "model": "questions.question",
  "pk": 1,
  "fields": {
    "text": "How can a metaclass ensure that all methods in a class have specific argument names?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "The '__new__' method in a metaclass can be used to inspect the function signatures of methods in the class and raise an error if they do not meet the required specifications.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 2,
  "fields": {
    "text": "What is the main advantage of using closures over simple functions in Python?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "Closures retain the state from their enclosing environment, making them useful for maintaining state information.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 3,
  "fields": {
    "text": "Which method in the threading module returns the current thread object?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": "The 'current_thread()' method in the threading module returns the thread object corresponding to the caller's thread of control.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 4,
  "fields": {
    "text": "What type of object can be used with 'contextlib.closing()'?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "'contextlib.closing()' can be used with any object that has a 'close()' method, ensuring that the resource is properly closed when the context is exited.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 5,
  "fields": {
    "text": "What is the benefit of using the 'contextlib.suppress' context manager?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "'contextlib.suppress' can be used to ignore specified exceptions in a 'with' block, which helps keep the code clean without adding unnecessary 'try...except' blocks.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 6,
  "fields": {
    "text": "Which Python module can be used to implement heap-based priority queues?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "The 'heapq' module provides functions to create and manage heaps, which are commonly used to implement priority queues.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 7,
  "fields": {
    "text": "Which of the following statements is used to remove a specific item from a list?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": "The 'remove(item)' method removes the first occurrence of the specified item from the list.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 8,
  "fields": {
    "text": "What Python library can you use to perform array and matrix manipulations?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 9,
  "fields": {
    "text": "What type of a language is HTML?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 10,
  "fields": {
    "text": "What is the primary way Python tracks memory usage of objects?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": "Python primarily uses reference counting to track the memory usage of objects, which helps determine when memory can be reclaimed.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 11,
  "fields": {
    "text": "Which of the functions is used to sort an array in descending order?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 12,
  "fields": {
    "text": "How does the 'futures.as_completed()' function benefit multithreading or multiprocessing in Python?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "The 'futures.as_completed()' function returns an iterator that yields futures as they complete, which helps to handle the results of concurrent tasks as soon as they are ready.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 13,
  "fields": {
    "text": "What is Laravel?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 15,
  "fields": {
    "text": "How can metaclasses be used to enforce singleton behavior in a class?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "A metaclass can enforce singleton behavior by overriding the '__new__' method to return the same instance whenever a new instance is requested.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 16,
  "fields": {
    "text": "How can you access the Django Admin site in a browser?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": "The Django Admin site is accessible by navigating to /admin in the browser, provided the server is running and the URLs are configured correctly.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 17,
  "fields": {
    "text": "How do you get a random record from a model in Django ORM?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "To get a random record, use the order_by('?') method on the queryset. This randomly orders the records and allows you to fetch one or more random entries.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 18,
  "fields": {
    "text": "How do you implement a custom notification system for actions performed in Django Admin?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "To implement a custom notification system, override the save_model() and delete_model() methods to send notifications using Django signals when specific actions are performed in Django Admin.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 19,
  "fields": {
    "text": "Which settings file key specifies the list of domains that are allowed to make requests to the Django app?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": "The 'ALLOWED_HOSTS' setting is a list of strings representing the host/domain names that are valid for the Django site.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 20,
  "fields": {
    "text": "How do you handle permissions for different actions in a single DRF viewset?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "To handle permissions for different actions in a viewset, override the get_permissions() method and return different permission classes based on the action being performed.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 21,
  "fields": {
    "text": "How do you implement role-based access control for different fields in Django Admin?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "To implement role-based access control, override the get_fields() and get_readonly_fields() methods in ModelAdmin to determine which fields are visible or editable based on the user's role.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 22,
  "fields": {
    "text": "How do you create a custom model manager in Django?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "A custom model manager is created by inheriting from models.Manager and adding custom query methods.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 23,
  "fields": {
    "text": "How do you implement cross-database foreign keys in Django?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "Django does not support cross-database foreign keys natively. You need to manually manage relationships across different databases.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 24,
  "fields": {
    "text": "Which Python package is commonly used to integrate Celery with Django?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": "The django-celery package is commonly used to integrate Celery with Django, providing utilities and integration support.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 25,
  "fields": {
    "text": "How do you implement a full-text search in Django with PostgreSQL?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "Django's contrib.postgres module provides SearchVector and SearchQuery classes, which can be used to implement full-text search with PostgreSQL.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 26,
  "fields": {
    "text": "How do you customize the list filter dropdown in Django Admin?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "To customize the list filter dropdown, create a custom class that inherits from SimpleListFilter, define the filtering logic, and add it to the list_filter attribute in ModelAdmin.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 27,
  "fields": {
    "text": "Which method is used to validate and save a model form in Django?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "In Django, you first use is_valid() to validate the data and then call save() to save the form.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 28,
  "fields": {
    "text": "Which signal would you use to perform an action after a model instance is deleted?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "The post_delete signal is triggered after a model instance is deleted, allowing you to perform cleanup actions or notify other parts of your application.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 29,
  "fields": {
    "text": "How can you customize the fields that are included in the serializer based on the request?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "To customize the fields included in the serializer based on the request, override the __init__() method to dynamically modify the fields attribute of the serializer.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 30,
  "fields": {
    "text": "How can you include related fields in a DRF serializer using depth?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "To include related fields in a serializer, set the depth attribute, which controls how deep the relationships are serialized.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 31,
  "fields": {
    "text": "How do you retrieve distinct values from a field in Django ORM?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "To retrieve distinct values, use the distinct() method on the queryset. This eliminates duplicate records from the result set.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 32,
  "fields": {
    "text": "How do you register a model to be managed by Django Admin?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": "To register a model with Django Admin, call admin.site.register() and pass the model as an argument, making it available in the Admin interface.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 33,
  "fields": {
    "text": "Which decorator is used to require a user to be logged in to access a Django view?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": "The '@login_required' decorator is used to ensure that only authenticated users can access the view.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 34,
  "fields": {
    "text": "How do you handle partial updates in a DRF viewset?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "To handle partial updates, use the partial=True argument in the serializer's update() method, allowing you to update only specific fields of an object.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 35,
  "fields": {
    "text": "How do you make a model field optional in Django?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "Setting 'blank=True' allows a field to be optional in forms, and 'null=True' allows the database to store a NULL value for that field.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 36,
  "fields": {
    "text": "Which command is used to install a package in Ubuntu?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": "To install a package in Ubuntu, use 'sudo apt install' followed by the package name.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 37,
  "fields": {
    "text": "Which one is the correct declaration for choosing the 'Character Set' other than default?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 38,
  "fields": {
    "text": "Which MySQL clause is used to group rows that have the same values in specified columns?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": "The 'GROUP BY' clause groups rows that have the same values in specified columns.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 39,
  "fields": {
    "text": "Which HTML attribute is used to specify a unique identifier for an element?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": "The id attribute is used to specify a unique identifier for an HTML element.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 40,
  "fields": {
    "text": "What type of join is needed when you wish to return rows that have matching values?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 41,
  "fields": {
    "text": "Which command is used to display all databases in MySQL?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": "The 'SHOW DATABASES;' command lists all databases on the MySQL server.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 42,
  "fields": {
    "text": "Which of the following is the best MySQL data type for currency values?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 43,
  "fields": {
    "text": "What SQL keyword is used to return unique values in a query result?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "The DISTINCT keyword is used in SQL to return only unique values, eliminating any duplicate entries in the query result.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 44,
  "fields": {
    "text": "Commands passed to the MySQL daemon are written in",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 45,
  "fields": {
    "text": "Which SQL clause can be used to group results by multiple columns simultaneously?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "The GROUP BY clause can be used to group data by multiple columns, allowing for more complex aggregations.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 46,
  "fields": {
    "text": "Which SQL statement is used to create a backup copy of a table?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "CREATE TABLE backup_table AS SELECT * FROM table_name copies a table's structure and data.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 47,
  "fields": {
    "text": "Words ORDER BY in the SQL operator",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 48,
  "fields": {
    "text": "How many distinct, different values can you hold in an Enum field?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 49,
  "fields": {
    "text": "In SQL, which function is used to calculate the total sum of a numeric column?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "The SUM() function calculates the total sum of a numeric column's values in a query result.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 50,
  "fields": {
    "text": "How do you implement conditional aggregation in SQL to count only specific rows in a group?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "Conditional aggregation can be achieved using CASE within COUNT or SUM.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 51,
  "fields": {
    "text": "Which of the following is available in MySQL:",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 52,
  "fields": {
    "text": "What SQL function returns the current date and time?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "NOW() returns the current date and time in SQL.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 53,
  "fields": {
    "text": "How do you fix a broken package in Ubuntu using dpkg?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "To fix a broken package, use 'sudo dpkg --configure -a'.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 54,
  "fields": {
    "text": "How do you list only the upgradable packages in Ubuntu?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "To list only upgradable packages, use 'apt list --upgradable'.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 55,
  "fields": {
    "text": "Which configuration best improves performance for write-heavy workloads?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "Optimizing wal_buffers and checkpoint_timeout improves write performance by better managing WAL writes and checkpoint frequency, reducing I/O spikes.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 56,
  "fields": {
    "text": "What is the most efficient way to implement a search-as-you-type feature in PostgreSQL?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "Trigram indexes with pg_trgm provide efficient partial string matching suitable for search-as-you-type functionality, with better performance than LIKE or regular expressions.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 57,
  "fields": {
    "text": "Which approach best optimizes performance of recursive hierarchical queries with depth limits?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "WITH RECURSIVE with indexed path and depth tracking provides efficient hierarchical queries by enabling early termination and utilizing indexes for path traversal.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 58,
  "fields": {
    "text": "What is the most effective approach for optimizing hash aggregation in memory-constrained environments?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "Implementing grouping sets with incremental spill to disk provides efficient hash aggregation by managing memory usage while maintaining performance through controlled disk usage.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 59,
  "fields": {
    "text": "What is the most effective approach for optimizing ORDER BY operations on multiple columns?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "Creating a multi-column index matching the ORDER BY clause enables index scan in the required order, avoiding explicit sort operations.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 60,
  "fields": {
    "text": "What is the most efficient index strategy for columns frequently used in both equality and range conditions?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "A B-tree index with included columns efficiently handles both equality and range conditions while potentially enabling index-only scans, reducing I/O operations.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 61,
  "fields": {
    "text": "What is the most effective way to handle high-throughput upserts with conflict resolution?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "Batch upserts with deferred constraints and conflict resolution functions provide efficient high-throughput writes by reducing lock contention and handling conflicts systematically.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 62,
  "fields": {
    "text": "What is the best practice for handling real-time notifications in PostgreSQL?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "LISTEN/NOTIFY with triggers provides a real-time, efficient way to handle notifications in PostgreSQL. It allows for asynchronous communication between sessions without the overhead of polling or the complexity of temporary tables.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 63,
  "fields": {
    "text": "What is the most efficient way to handle concurrent sequence generation for partitioned tables?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "Partitioned sequences with appropriate cache settings provide efficient concurrent key generation by reducing contention and maintaining partition-specific ranges.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 64,
  "fields": {
    "text": "Which PostgreSQL feature would you use to track changes to a table without triggers?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "Logical decoding allows you to extract changes from the WAL in a format that applications can easily consume, making it ideal for change data capture (CDC) without the overhead of triggers.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 65,
  "fields": {
    "text": "How can you implement efficient full-text search across multiple languages with different alphabets in PostgreSQL?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "Multiple tsvector columns with appropriate dictionaries for each language provide efficient multilingual full-text search while respecting language-specific rules and alphabets.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 66,
  "fields": {
    "text": "What is the most effective way to handle concurrent metadata updates in partitioned tables?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "Versioned metadata with MVCC-based access provides efficient concurrent metadata updates by maintaining consistency while allowing parallel access to different versions.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 67,
  "fields": {
    "text": "What is the best practice for handling dynamic SQL in PostgreSQL stored procedures?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "Using EXECUTE with format() and parameters provides safe dynamic SQL execution while preventing SQL injection and maintaining query plan caching capabilities.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 68,
  "fields": {
    "text": "What is the most effective way to handle high-volume COPY operations with transformed data?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "Staged COPY with transformation functions and parallel processing provides efficient data loading by distributing transformation overhead and maintaining high throughput.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 69,
  "fields": {
    "text": "What is the most effective strategy for optimizing full text search across multiple languages with relevance?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "Multiple tsvector columns with language-specific weights and dictionaries optimize multilingual search by enabling proper language processing and relevance calculation per language.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 70,
  "fields": {
    "text": "How can you implement custom aggregates in PostgreSQL?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "CREATE AGGREGATE allows you to define custom aggregate functions by specifying state transition functions, making it possible to create complex statistical or analytical operations not available in standard PostgreSQL.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 71,
  "fields": {
    "text": "Which strategy best optimizes performance of hierarchical closure table queries?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "Partial indexes on active paths with materialized ancestors optimize closure table queries by reducing index size and providing efficient access to current hierarchical relationships.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 72,
  "fields": {
    "text": "What is the purpose of VACUUM in PostgreSQL?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "VACUUM reclaims storage occupied by dead tuples (updated/deleted rows) and updates the visibility map and statistics used by the query planner. This is crucial for maintaining database performance and preventing bloat.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 73,
  "fields": {
    "text": "What is the most reliable way to implement idempotent updates in PostgreSQL?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "ON CONFLICT DO UPDATE with version checking provides reliable idempotent updates by handling duplicates and ensuring consistent state regardless of retry attempts.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 74,
  "fields": {
    "text": "Which PostgreSQL extension would you use for automated partition management?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "pg_partman provides automated partition creation and maintenance, including time-based and serial-based partitioning, making it the standard tool for partition management in PostgreSQL.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 75,
  "fields": {
    "text": "What does the 'thenable' concept in Promises mean?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "A 'thenable' is an object that implements a 'then' method and behaves like a Promise.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 76,
  "fields": {
    "text": "How can you optimize garbage collection performance in a Node.js application?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "You can optimize garbage collection by adjusting V8 heap settings such as `--max-old-space-size` and `--max-semi-space-size`.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 77,
  "fields": {
    "text": "What is the recommended way to handle the 'error' event in an EventEmitter?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "To prevent the process from crashing, always attach at least one listener to the 'error' event.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 78,
  "fields": {
    "text": "What is the significance of 'stream.Duplex' in custom stream implementations?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "'stream.Duplex' enables simultaneous reading and writing in custom streams, allowing bidirectional data flow.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 79,
  "fields": {
    "text": "What does 'Buffer.isEncoding(encoding)' check?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "'Buffer.isEncoding(encoding)' checks if the given encoding is supported by Node.js.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 80,
  "fields": {
    "text": "What is the impact of setting the `objectMode` option to `true` in streams?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "Setting `objectMode` to `true` allows the stream to handle objects instead of buffers or strings.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 81,
  "fields": {
    "text": "How can you monitor the duration of specific operations in a Node.js application?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "`performance.mark()` and `performance.measure()` from the `perf_hooks` module allow monitoring the duration of specific operations.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 82,
  "fields": {
    "text": "What does 'stream.Writable.write()' return in Node.js?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "'stream.Writable.write()' returns true if the data was written immediately, otherwise false to indicate backpressure.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 83,
  "fields": {
    "text": "How can you verify if an EventEmitter has any listeners for a specific event?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "'eventEmitter.listenerCount(eventName)' returns the number of listeners for the specified event.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 84,
  "fields": {
    "text": "How can you convert a Buffer to JSON?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "The 'buffer.toJSON()' method converts a Buffer into a JSON object.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 85,
  "fields": {
    "text": "What property in a worker thread contains the file that the worker is executing?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "The 'worker.filename' property provides the file path of the script being executed by the worker.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 86,
  "fields": {
    "text": "What is the effect of passing an empty array as arguments to 'spawn()'?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "Passing an empty array executes the command without any additional arguments.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 87,
  "fields": {
    "text": "How do you prevent a readable stream from flowing automatically when created?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "A readable stream will not flow automatically if no 'data' event listener is attached or if `read()` is not called.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 88,
  "fields": {
    "text": "Which method is used to decrypt data encrypted with 'crypto.publicEncrypt()'?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "'crypto.privateDecrypt()' decrypts data encrypted with a public key.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 89,
  "fields": {
    "text": "How do you handle backpressure in writable streams?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "To handle backpressure, listen for the 'drain' event and resume writing when the stream is ready.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 90,
  "fields": {
    "text": "What method is used to write data to a file asynchronously?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": "'fs.writeFile()' is used to write data to a file asynchronously, creating the file if it does not exist.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 91,
  "fields": {
    "text": "What is the role of the 'os.constants.signals' object in Node.js?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "'os.constants.signals' provides constants for handling operating system signals, such as 'SIGINT' and 'SIGTERM'.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 92,
  "fields": {
    "text": "How can you handle legacy clients that only support outdated SSL protocols in a Node.js server?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "You can enable support for outdated protocols like SSLv3 and TLSv1.0 by setting the `secureProtocol` option to allow these versions.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 93,
  "fields": {
    "text": "What is the purpose of the 'stdio' option in 'fork()'?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "The 'stdio' option in 'fork()' specifies how the input/output streams between the parent and child processes are configured.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 94,
  "fields": {
    "text": "How do you install a package globally in Node.js using npm?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": "The '-g' flag in npm installs a package globally.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 95,
  "fields": {
    "text": "Which command is used to create a UFW rule that allows access to port 3306 from a specific IP in Ubuntu?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "To allow access to port 3306 from a specific IP, use 'sudo ufw allow from IP_ADDRESS to any port 3306'.",
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 96,
  "fields": {
    "text": "How do you permanently disable root access via SSH on Ubuntu?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "To permanently disable root access via SSH, edit '/etc/ssh/sshd_config' and set 'PermitRootLogin no', then restart the SSH service.",
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 97,
  "fields": {
    "text": "How do you disable password-based SSH authentication in Ubuntu?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "To disable password-based SSH authentication, edit '/etc/ssh/sshd_config' and set 'PasswordAuthentication no', then restart SSH.",
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 98,
  "fields": {
    "text": "Which command is used to enable logging of denied packets in UFW?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "To enable logging of denied packets, use 'sudo ufw logging on'.",
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 99,
  "fields": {
    "text": "How do you block all outgoing traffic except for DNS and HTTP using UFW?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "To block all outgoing traffic except DNS and HTTP, use 'sudo ufw default deny outgoing', then allow the required ports.",
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 100,
  "fields": {
    "text": "Which command is used to add an IP address to the Fail2Ban ignore list in Ubuntu?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "To add an IP address to the Fail2Ban ignore list, edit '/etc/fail2ban/jail.local' and add the IP to 'ignoreip' under '[DEFAULT]'.",
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 101,
  "fields": {
    "text": "Which command is used to configure a port knocking sequence for SSH in Ubuntu?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "To configure port knocking for SSH, install 'knockd' and configure '/etc/knockd.conf'.",
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 102,
  "fields": {
    "text": "Which command is used to configure UFW to deny all incoming connections except SSH, HTTP, and HTTPS in Ubuntu?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "To deny all incoming connections except SSH, HTTP, and HTTPS, use 'sudo ufw default deny incoming' followed by specific allow rules.",
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 103,
  "fields": {
    "text": "How do you configure a firewall rule using UFW to allow HTTPS traffic on port 443 in Ubuntu?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "To allow HTTPS traffic, use 'sudo ufw allow 443/tcp'.",
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 104,
  "fields": {
    "text": "How do you configure UFW to allow connections only from a specific IP address in Ubuntu?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 2,
    "explanation": "To allow connections only from a specific IP address, use 'sudo ufw allow from IP_ADDRESS'.",
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 105,
  "fields": {
    "text": "Python is an interpreted language.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "Python code is executed line by line by the Python interpreter.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 106,
  "fields": {
    "text": "The 'var' keyword is used to declare variables in Python.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "'var' is used in JavaScript, not Python.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 107,
  "fields": {
    "text": "In Python, indentation is not important for defining blocks of code.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "Indentation is crucial in Python to define blocks of code.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 108,
  "fields": {
    "text": "In JavaScript, '==' checks for equality of values without type conversion.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "'==' in JavaScript performs type coercion. For strict equality, '===' is used.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 109,
  "fields": {
    "text": "The 'break' statement in a loop terminates the loop and passes control to the next statement.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "The 'break' statement terminates the loop, and the program continues with the next statement outside the loop.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 110,
  "fields": {
    "text": "In C++, memory management is automatic, so no need to manually allocate or free memory.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "In C++, memory management is manual. You need to allocate and free memory explicitly.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 111,
  "fields": {
    "text": "The 'else' block in an if statement is executed only when the condition is true.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "The 'else' block is executed when the condition is false.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 112,
  "fields": {
    "text": "A for loop in Python can only iterate over sequences such as lists, tuples, and strings.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "In Python, a 'for' loop iterates over any iterable object, including sequences like lists, tuples, and strings.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 113,
  "fields": {
    "text": "In SQL, the 'SELECT' statement is used to modify data in a table.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "'SELECT' is used to query data, not modify it. 'INSERT', 'UPDATE', and 'DELETE' are used to modify data.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 114,
  "fields": {
    "text": "In Java, you cannot create an instance of an abstract class.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "In Java, abstract classes cannot be instantiated directly, but they can be subclassed.",
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 115,
  "fields": {
    "text": "The SQL 'SELECT' statement is used to retrieve data from a database.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "'SELECT' is used to query and retrieve data from one or more tables.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 116,
  "fields": {
    "text": "SQL stands for Structured Query Language.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "SQL stands for Structured Query Language, a standard language for managing relational databases.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 117,
  "fields": {
    "text": "The SQL 'INSERT' statement is used to delete records from a database table.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "'INSERT' is used to add records, while 'DELETE' is used to remove records.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 118,
  "fields": {
    "text": "In SQL, a 'PRIMARY KEY' can be null.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "A 'PRIMARY KEY' must be unique and cannot be null.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 119,
  "fields": {
    "text": "The 'WHERE' clause in SQL is used to filter records based on specified conditions.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "'WHERE' is used to filter the results of a query based on conditions.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 120,
  "fields": {
    "text": "A 'FOREIGN KEY' constraint is used to uniquely identify each row in a database table.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "'PRIMARY KEY' uniquely identifies rows; 'FOREIGN KEY' links to another table's primary key.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 121,
  "fields": {
    "text": "SQL supports both relational and non-relational databases.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "SQL is used with relational databases, while non-relational databases like NoSQL use different languages.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 122,
  "fields": {
    "text": "The 'GROUP BY' clause in SQL is used to group rows that have the same values into summary rows.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "'GROUP BY' groups records based on a specified column and can be used with aggregate functions.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 123,
  "fields": {
    "text": "In SQL, the 'UPDATE' statement is used to modify existing records in a database table.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "'UPDATE' allows modification of existing records based on conditions in the 'WHERE' clause.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 124,
  "fields": {
    "text": "SQL joins can only be used with two tables.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "SQL joins can be used with multiple tables, not just two.",
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 125,
  "fields": {
    "text": "Django is a Python-based web framework.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "Django is a high-level Python web framework that encourages rapid development.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 126,
  "fields": {
    "text": "Django uses the Model-View-Controller (MVC) design pattern.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "Django follows the Model-View-Template (MVT) design pattern, not MVC.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 127,
  "fields": {
    "text": "In Django, the 'urls.py' file is used to define URL routing patterns.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "The 'urls.py' file in Django maps URLs to views and their associated logic.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 128,
  "fields": {
    "text": "Django's ORM (Object-Relational Mapping) allows you to query the database using Python code.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "Django ORM allows developers to interact with the database through Python classes instead of SQL queries.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 129,
  "fields": {
    "text": "In Django, a 'view' is responsible for rendering templates to display content to the user.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "Views in Django handle the business logic and return the response, often rendering templates.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 130,
  "fields": {
    "text": "In Django, 'models.py' is used to define URL routing patterns.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "'models.py' is used to define database models, not URL routing.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 131,
  "fields": {
    "text": "Django supports both SQL and NoSQL databases out of the box.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "Django's ORM primarily supports relational databases (SQL), but it does not support NoSQL databases natively.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 132,
  "fields": {
    "text": "The 'settings.py' file in Django contains the configuration of the project, such as database settings, installed apps, and middleware.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "The 'settings.py' file holds the configuration details of a Django project, including databases, installed apps, and other settings.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 133,
  "fields": {
    "text": "Django provides built-in support for user authentication and authorization.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "Django comes with a built-in user authentication system that supports login, registration, and permissions.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 134,
  "fields": {
    "text": "Django allows you to define static files (like CSS, JavaScript, and images) directly in models.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "Static files in Django are typically handled through the static directory, not models.",
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 135,
  "fields": {
    "text": "PostgreSQL is an open-source relational database management system.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "PostgreSQL is an open-source object-relational database management system.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 136,
  "fields": {
    "text": "PostgreSQL uses the SQL standard and also supports JSON for document storage.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "PostgreSQL supports SQL for relational data and JSON for document-based data.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 137,
  "fields": {
    "text": "In PostgreSQL, a table can only have one primary key.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "A primary key uniquely identifies each row in a table, and only one primary key is allowed per table.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 138,
  "fields": {
    "text": "PostgreSQL does not support transactions.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "PostgreSQL fully supports transactions, ensuring ACID properties.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 139,
  "fields": {
    "text": "PostgreSQL is compatible with other database management systems like MySQL and SQLite.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "PostgreSQL can integrate with other database systems and supports many of the same SQL features.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 140,
  "fields": {
    "text": "In PostgreSQL, the 'FOREIGN KEY' constraint ensures referential integrity between tables.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "A 'FOREIGN KEY' is used to ensure referential integrity by linking rows between tables.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 141,
  "fields": {
    "text": "In PostgreSQL, indexes improve the performance of SELECT queries but can slow down INSERT, UPDATE, and DELETE operations.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "Indexes speed up retrieval of data but may slow down write operations due to additional overhead.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 142,
  "fields": {
    "text": "PostgreSQL supports full-text search out of the box.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "PostgreSQL provides built-in capabilities for full-text search, making it suitable for text-based querying.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 143,
  "fields": {
    "text": "PostgreSQL is a NoSQL database.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "PostgreSQL is a relational database, though it has support for JSON and other non-relational features.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 144,
  "fields": {
    "text": "In PostgreSQL, a 'VIEW' is a virtual table that is stored in the database.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "A 'VIEW' is a virtual table created from a SELECT query but is not physically stored in the database.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 145,
  "fields": {
    "text": "Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "Node.js is built on the V8 JavaScript engine used in Google Chrome to execute JavaScript code outside the browser.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 146,
  "fields": {
    "text": "Node.js is a framework for building web applications.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "Node.js is a runtime environment, not a framework. It allows you to run JavaScript server-side.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 147,
  "fields": {
    "text": "Node.js is single-threaded but uses non-blocking, event-driven I/O to handle multiple concurrent requests.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "Node.js uses asynchronous, non-blocking I/O, which allows it to handle many requests concurrently.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 148,
  "fields": {
    "text": "Node.js is ideal for CPU-heavy applications.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "Node.js is better suited for I/O-heavy applications. CPU-heavy tasks can block the event loop and degrade performance.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 149,
  "fields": {
    "text": "In Node.js, the 'require' function is used to import modules and libraries.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "The 'require' function is used in Node.js to import built-in or external modules, as well as user-defined modules.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 150,
  "fields": {
    "text": "Node.js can only run JavaScript code and not any other programming languages.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "While Node.js is primarily designed for JavaScript, it can also be extended to use other languages through various integrations.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 151,
  "fields": {
    "text": "Node.js is not suitable for real-time applications, such as messaging apps.",
    "question_type": "TF",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": "Node.js is well-suited for real-time applications due to its event-driven, non-blocking architecture.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 152,
  "fields": {
    "text": "Node.js uses a package manager called 'npm' for managing dependencies and packages.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "Node.js uses npm (Node Package Manager) to manage libraries, dependencies, and packages for JavaScript applications.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 153,
  "fields": {
    "text": "Node.js can be used to build both frontend and backend applications.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "Node.js is typically used for backend development, but it can also be integrated into frontend workflows via tools like Electron.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 154,
  "fields": {
    "text": "In Node.js, the 'process' object is used to manage application lifecycle events.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "The 'process' object in Node.js allows you to interact with and manage the application's lifecycle, such as handling environment variables and exit events.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 155,
  "fields": {
    "text": "Match the Node.js module with its function.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 156,
  "fields": {
    "text": "Match the Node.js module with its function.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 157,
  "fields": {
    "text": "Match the Node.js method with its description.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 158,
  "fields": {
    "text": "Match the Node.js function with the type of I/O operation.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 159,
  "fields": {
    "text": "Match the Node.js module with its feature.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 160,
  "fields": {
    "text": "Match the Node.js framework with its use case.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 161,
  "fields": {
    "text": "Match the Node.js event with its listener.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 162,
  "fields": {
    "text": "Match the Node.js method with its behavior.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 163,
  "fields": {
    "text": "Match the Node.js term with its description.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 164,
  "fields": {
    "text": "Match the Node.js object with its property.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 165,
  "fields": {
    "text": "Match the Node.js concept with its explanation.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 166,
  "fields": {
    "text": "Match the Postgres data type with its description.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 167,
  "fields": {
    "text": "Match the Postgres command with its functionality.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 168,
  "fields": {
    "text": "Match the Postgres index type with its description.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 169,
  "fields": {
    "text": "Match the Postgres JOIN type with its functionality.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 170,
  "fields": {
    "text": "Match the Postgres transaction property with its description.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 171,
  "fields": {
    "text": "Match the Postgres constraint type with its description.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 172,
  "fields": {
    "text": "Match the Postgres function type with its usage.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 173,
  "fields": {
    "text": "Match the Postgres data model with its description.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 174,
  "fields": {
    "text": "Match the Postgres command with its SQL clause.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 175,
  "fields": {
    "text": "Match the Postgres concurrency control method with its description.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 176,
  "fields": {
    "text": "Match the Django model field type with its purpose.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 177,
  "fields": {
    "text": "Match the Django ORM operation with its SQL equivalent.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 178,
  "fields": {
    "text": "Match the Django template tag with its functionality.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 179,
  "fields": {
    "text": "Match the Django HTTP status code with its description.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 180,
  "fields": {
    "text": "Match the Django middleware with its functionality.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 181,
  "fields": {
    "text": "Match the Django settings with their purposes.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 182,
  "fields": {
    "text": "Match the Django management command with its function.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 183,
  "fields": {
    "text": "Match the Django field option with its purpose.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 184,
  "fields": {
    "text": "Match the Django signal with its purpose.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 185,
  "fields": {
    "text": "Match the Django ORM method with its purpose.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 186,
  "fields": {
    "text": "Match the SQL keyword with its purpose.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 187,
  "fields": {
    "text": "Match the SQL constraint with its purpose.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 188,
  "fields": {
    "text": "Match the SQL function with its usage.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 189,
  "fields": {
    "text": "Match the SQL clause with its functionality.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 190,
  "fields": {
    "text": "Match the SQL JOIN type with its purpose.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 191,
  "fields": {
    "text": "Match the SQL data type with its description.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 192,
  "fields": {
    "text": "Match the SQL keyword with its operation.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 193,
  "fields": {
    "text": "Match the SQL wildcard with its use.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 194,
  "fields": {
    "text": "Match the SQL aggregate function with its description.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 195,
  "fields": {
    "text": "Match the SQL transaction statement with its function.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 196,
  "fields": {
    "text": "Match the programming term with its description.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 197,
  "fields": {
    "text": "Match the programming paradigm with its characteristic.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 198,
  "fields": {
    "text": "Match the data structure with its use case.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 199,
  "fields": {
    "text": "Match the programming concept with its purpose.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 200,
  "fields": {
    "text": "Match the common error with its description.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 201,
  "fields": {
    "text": "Match the algorithm type with its example.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 202,
  "fields": {
    "text": "Match the HTTP method with its purpose.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 203,
  "fields": {
    "text": "Match the file format with its use case.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 204,
  "fields": {
    "text": "Match the common design pattern with its purpose.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 205,
  "fields": {
    "text": "Match the coding principle with its definition.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 206,
  "fields": {
    "text": "Match the computer-related term with its description.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 207,
  "fields": {
    "text": "Match the networking protocol with its function.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 208,
  "fields": {
    "text": "Match the common acronym with its full form.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 209,
  "fields": {
    "text": "Match the keyboard shortcut with its action.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 210,
  "fields": {
    "text": "Match the technology with its developer.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 211,
  "fields": {
    "text": "Arrange the steps to write a Python program.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 212,
  "fields": {
    "text": "Arrange the steps to write a Python program.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 213,
  "fields": {
    "text": "Arrange the stages of software development lifecycle.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 214,
  "fields": {
    "text": "Arrange the steps to compile and run a Java program.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 215,
  "fields": {
    "text": "Arrange the steps to debug a program.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 216,
  "fields": {
    "text": "Arrange the steps to set up a Git repository.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 217,
  "fields": {
    "text": "Arrange the steps to write and execute a Python script.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 218,
  "fields": {
    "text": "Arrange the steps to design a software application.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 219,
  "fields": {
    "text": "Arrange the stages of object-oriented programming.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 220,
  "fields": {
    "text": "Arrange the steps to execute a SQL query in a database.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 221,
  "fields": {
    "text": "Arrange the steps to create a REST API.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 222,
  "fields": {
    "text": "Arrange the steps to install and use a package in Python.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 223,
  "fields": {
    "text": "Arrange the steps to handle a merge conflict in Git.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 3
  }
},
{
  "model": "questions.question",
  "pk": 224,
  "fields": {
    "text": "Arrange the steps to create a table in SQL.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 225,
  "fields": {
    "text": "Arrange the steps to fetch data from a database.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 226,
  "fields": {
    "text": "Arrange the steps to create a database in SQL.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 227,
  "fields": {
    "text": "Arrange the steps to execute a SELECT query.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 228,
  "fields": {
    "text": "Arrange the steps to insert data into a table.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 229,
  "fields": {
    "text": "Arrange the steps to update records in a table.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 230,
  "fields": {
    "text": "Arrange the steps to delete records from a table.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 231,
  "fields": {
    "text": "Arrange the steps to create a table in SQL.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 232,
  "fields": {
    "text": "Arrange the steps to create an index in SQL.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 233,
  "fields": {
    "text": "Arrange the steps to perform a database backup.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 234,
  "fields": {
    "text": "Arrange the steps to restore a database from a backup.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 235,
  "fields": {
    "text": "Arrange the steps to use a JOIN in SQL.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 236,
  "fields": {
    "text": "Arrange the steps to create a Django project.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 237,
  "fields": {
    "text": "Arrange the steps to handle a request in Django.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 238,
  "fields": {
    "text": "Arrange the steps to create a new Django project.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 239,
  "fields": {
    "text": "Arrange the steps to create a new Django app.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 240,
  "fields": {
    "text": "Arrange the steps to add a model to the database.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 241,
  "fields": {
    "text": "Arrange the steps to use Django's admin interface.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 242,
  "fields": {
    "text": "Arrange the steps to handle a form in Django.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 243,
  "fields": {
    "text": "Arrange the steps to set up static files in Django.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 244,
  "fields": {
    "text": "Arrange the steps to write a Django view.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 245,
  "fields": {
    "text": "Arrange the steps to use Django templates.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 246,
  "fields": {
    "text": "Arrange the steps to add a custom middleware in Django.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 247,
  "fields": {
    "text": "Arrange the steps to set up a database in Django.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 248,
  "fields": {
    "text": "Arrange the steps to set up a Postgres database.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 249,
  "fields": {
    "text": "Arrange the steps to back up a Postgres database.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 250,
  "fields": {
    "text": "Arrange the steps to install PostgreSQL on a system.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 251,
  "fields": {
    "text": "Arrange the steps to create a database in PostgreSQL.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 252,
  "fields": {
    "text": "Arrange the steps to create a new user in PostgreSQL.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 253,
  "fields": {
    "text": "Arrange the steps to back up a PostgreSQL database.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 254,
  "fields": {
    "text": "Arrange the steps to restore a PostgreSQL database from a backup.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 255,
  "fields": {
    "text": "Arrange the steps to connect to a PostgreSQL database from a Python script.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 256,
  "fields": {
    "text": "Arrange the steps to create a table in PostgreSQL.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 257,
  "fields": {
    "text": "Arrange the steps to insert data into a PostgreSQL table.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 258,
  "fields": {
    "text": "Arrange the steps to add an index to a PostgreSQL table.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 259,
  "fields": {
    "text": "Arrange the steps to use joins in PostgreSQL.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 260,
  "fields": {
    "text": "Arrange the steps to create a Node.js project.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 261,
  "fields": {
    "text": "Arrange the steps to handle a request in a Node.js application.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 262,
  "fields": {
    "text": "Arrange the steps to install Node.js on a system.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 263,
  "fields": {
    "text": "Arrange the steps to create a new Node.js project.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 264,
  "fields": {
    "text": "Arrange the steps to create a simple HTTP server using Node.js.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 265,
  "fields": {
    "text": "Arrange the steps to handle a POST request in Node.js.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 266,
  "fields": {
    "text": "Arrange the steps to install and use Express.js in a Node.js project.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 267,
  "fields": {
    "text": "Arrange the steps to connect Node.js to a MongoDB database.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 268,
  "fields": {
    "text": "Arrange the steps to read a file in Node.js.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 269,
  "fields": {
    "text": "Arrange the steps to create a middleware in Express.js.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 270,
  "fields": {
    "text": "Arrange the steps to deploy a Node.js application.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 271,
  "fields": {
    "text": "Arrange the steps to debug a Node.js application.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 272,
  "fields": {
    "text": "Arrange the steps to use a computer.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 273,
  "fields": {
    "text": "Arrange the steps to troubleshoot a system issue.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 274,
  "fields": {
    "text": "Arrange the steps to troubleshoot a server that is down.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 275,
  "fields": {
    "text": "Arrange the steps to prepare a presentation.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 276,
  "fields": {
    "text": "Arrange the steps to apply for a job online.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 277,
  "fields": {
    "text": "Arrange the steps to prepare a meal.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 278,
  "fields": {
    "text": "Arrange the steps to set up a new computer.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 6
  }
},
{
  "model": "questions.question",
  "pk": 279,
  "fields": {
    "text": "How can you optimize garbage collection performance in a Node.js application?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "You can optimize garbage collection by adjusting V8 heap settings such as `--max-old-space-size` and `--max-semi-space-size`.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 280,
  "fields": {
    "text": "Arrange the steps to fetch data from a database.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 281,
  "fields": {
    "text": "Match the Django HTTP status code with its description.",
    "question_type": "MT",
    "tf_correct_answer": false,
    "difficulty": 1,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 5
  }
},
{
  "model": "questions.question",
  "pk": 282,
  "fields": {
    "text": "How can you optimize garbage collection performance in a Node.js application?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "You can optimize garbage collection by adjusting V8 heap settings such as `--max-old-space-size` and `--max-semi-space-size`.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "questions.question",
  "pk": 283,
  "fields": {
    "text": "PostgreSQL is an open-source relational database management system.",
    "question_type": "TF",
    "tf_correct_answer": true,
    "difficulty": 0,
    "explanation": "PostgreSQL is an open-source object-relational database management system.",
    "user": [
      "testuser@example.com"
    ],
    "category": 7
  }
},
{
  "model": "questions.question",
  "pk": 284,
  "fields": {
    "text": "Arrange the steps to fetch data from a database.",
    "question_type": "OR",
    "tf_correct_answer": false,
    "difficulty": 0,
    "explanation": null,
    "user": [
      "testuser@example.com"
    ],
    "category": 4
  }
},
{
  "model": "questions.question",
  "pk": 286,
  "fields": {
    "text": "How can you optimize garbage collection performance in a Node.js application?",
    "question_type": "MC",
    "tf_correct_answer": false,
    "difficulty": 3,
    "explanation": "You can optimize garbage collection by adjusting V8 heap settings such as `--max-old-space-size` and `--max-semi-space-size`.",
    "user": [
      "testuser@example.com"
    ],
    "category": 8
  }
},
{
  "model": "quizzes.quiz",
  "pk": 1,
  "fields": {
    "title": "Quiz on General Knowledge",
    "description": "A quiz to test your knowledge on various topics.",
    "created_at": "2025-01-08T06:47:59.051Z",
    "updated_at": "2025-01-08T06:47:59.051Z",
    "user": [
      "testuser@example.com"
    ],
    "category": 5,
    "questions": [
      112,
      30,
      45
    ]
  }
},
{
  "model": "quizzes.quiz",
  "pk": 3,
  "fields": {
    "title": "New Quiz",
    "description": "Added through the admin panel",
    "created_at": "2025-01-14T06:35:36.882Z",
    "updated_at": "2025-01-14T06:35:36.882Z",
    "user": [
      "zzzz@gmail.com"
    ],
    "category": 6,
    "questions": [
      106,
      222,
      227,
      33
    ]
  }
},
{
  "model": "authtoken.token",
  "pk": "082866114f3e1ea6cf30f75c435ceeb377e1da40",
  "fields": {
    "user": [
      "testuser@example.com"
    ],
    "created": "2025-01-08T02:30:26.489Z"
  }
},
{
  "model": "authtoken.token",
  "pk": "71240263795431510d2314307564f9e1128d886d",
  "fields": {
    "user": [
      "zeyad@gmail.com"
    ],
    "created": "2025-01-13T11:25:06.929Z"
  }
},
{
  "model": "authtoken.token",
  "pk": "ff7fd0c10c70788c32d787a51f9154a04547264e",
  "fields": {
    "user": [
      "zzzz@gmail.com"
    ],
    "created": "2025-01-13T13:01:31.124Z"
  }
},
{
  "model": "admin.logentry",
  "pk": 1,
  "fields": {
    "action_time": "2025-01-13T13:40:34.835Z",
    "user": [
      "zzzz@gmail.com"
    ],
    "content_type": [
      "questions",
      "mcq"
    ],
    "object_id": "361",
    "object_repr": "MCQ choice: 361 for question: 90",
    "action_flag": 2,
    "change_message": "[]"
  }
},
{
  "model": "admin.logentry",
  "pk": 2,
  "fields": {
    "action_time": "2025-01-14T06:35:36.893Z",
    "user": [
      "zzzz@gmail.com"
    ],
    "content_type": [
      "quizzes",
      "quiz"
    ],
    "object_id": "3",
    "object_repr": "Quiz: 3 from user: 6 in category: Uncategorized",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
}
]
